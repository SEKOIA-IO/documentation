{
    "swagger": "2.0",
    "basePath": "/v1",
    "paths": {
        "/private/archives": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/ListArchivesSchema"
                        }
                    }
                },
                "summary": "Get the list of archives",
                "description": "Needs an application token",
                "operationId": "get_archives_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/private/archives/snapshots": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    }
                },
                "summary": "Register new snapshots",
                "description": "Needs an application token",
                "operationId": "post_archive_snapshots_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "successes",
                        "required": true,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "The list of successful snapshot uploads on storages",
                        "items": {
                            "type": "object",
                            "properties": {
                                "archive_uuid": {
                                    "type": "string",
                                    "description": "The identifier of the archive the snapshot belongs to"
                                },
                                "snapshot_name": {
                                    "type": "string",
                                    "description": "The name of the snapshot"
                                },
                                "storage_name": {
                                    "type": "string",
                                    "description": "The name of the storage"
                                },
                                "period": {
                                    "description": "The period covered by the snapshot",
                                    "type": "object",
                                    "properties": {
                                        "start_dt": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "The lower date (included) covered by the snapshot"
                                        },
                                        "end_dt": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "The upper date (excluded) covered by the snapshot"
                                        }
                                    },
                                    "required": [
                                        "end_dt",
                                        "start_dt"
                                    ]
                                },
                                "segments": {
                                    "type": "array",
                                    "description": "The list of successful upload of segments on the storage",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the segment"
                                            },
                                            "size": {
                                                "type": "integer",
                                                "description": "The compressed bytes size of the segment"
                                            },
                                            "count": {
                                                "type": "integer",
                                                "description": "The number of events in the segment"
                                            },
                                            "creation_time": {
                                                "type": "integer",
                                                "description": "The creation timestamp of the segment"
                                            },
                                            "hexdigest": {
                                                "type": "string",
                                                "description": "The SHA256 digest of the segment"
                                            }
                                        },
                                        "required": [
                                            "count",
                                            "creation_time",
                                            "hexdigest",
                                            "name",
                                            "size"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "archive_uuid",
                                "period",
                                "segments",
                                "snapshot_name",
                                "storage_name"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "failures",
                        "required": true,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "The list of failed snapshot uploads on storages",
                        "items": {
                            "type": "object",
                            "properties": {
                                "archive_uuid": {
                                    "type": "string",
                                    "description": "The identifier of the archive the snapshot belongs to"
                                },
                                "snapshot_name": {
                                    "type": "string",
                                    "description": "The name of the snapshot"
                                },
                                "storage_name": {
                                    "type": "string",
                                    "description": "The name of the storage"
                                },
                                "period": {
                                    "description": "The period covered by the snapshot",
                                    "type": "object",
                                    "properties": {
                                        "start_dt": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "The lower date (included) covered by the snapshot"
                                        },
                                        "end_dt": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "The upper date (excluded) covered by the snapshot"
                                        }
                                    },
                                    "required": [
                                        "end_dt",
                                        "start_dt"
                                    ]
                                },
                                "segments": {
                                    "type": "array",
                                    "description": "The list of failed upload of segments on the storage",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": "The name of the segment"
                                            },
                                            "size": {
                                                "type": "integer",
                                                "description": "The compressed bytes size of the segment"
                                            },
                                            "count": {
                                                "type": "integer",
                                                "description": "The number of events in the segment"
                                            },
                                            "creation_time": {
                                                "type": "integer",
                                                "description": "The creation timestamp of the segment"
                                            },
                                            "error": {
                                                "type": "string",
                                                "description": "The reason of the failure"
                                            }
                                        },
                                        "required": [
                                            "count",
                                            "creation_time",
                                            "error",
                                            "name",
                                            "size"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "archive_uuid",
                                "period",
                                "segments",
                                "snapshot_name",
                                "storage_name"
                            ]
                        }
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/private/customers": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/ListCustomerSchema"
                        }
                    }
                },
                "summary": "Get the list of customers with their entities",
                "description": "Needs an application token",
                "operationId": "get_customers_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/private/entities": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/EntityListSchema"
                        }
                    }
                },
                "summary": "Get the list of entities with their associated generation mode",
                "description": "Needs an application token",
                "operationId": "get_entities_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "include_deleted",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "description": "If set to True, deleted entities are also considered"
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "UUIDs of the rules to pull"
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/private/intakes": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    }
                },
                "summary": "Get the list of intakes with their associated format",
                "description": "Needs an application token",
                "operationId": "get_intakes_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[format_uuid]",
                        "required": false,
                        "type": "string",
                        "default": null,
                        "x-nullable": true,
                        "description": "UUIDs of the format of intakes to pull"
                    },
                    {
                        "in": "query",
                        "name": "match[intake_uuid]",
                        "required": false,
                        "type": "string",
                        "default": null,
                        "x-nullable": true,
                        "description": "UUIDs of the intakes to pull"
                    },
                    {
                        "in": "query",
                        "name": "match[connector_configuration_uuid]",
                        "required": false,
                        "type": "string",
                        "default": null,
                        "x-nullable": true,
                        "description": "UUIDs of the connector configuration of intakes to pull"
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/private/rules-catalog": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleWorkerListSchema"
                        }
                    }
                },
                "summary": "Pull all rules",
                "description": "Needs application token\n\nThe following permissions are required:\n - â€œSIC_PULL_RULESâ€ (`6edf3c4b-30a0-4790-8322-6a5b3f8f9b5d`)",
                "operationId": "get_pull_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "type of the template (allowed values are cti, correlation, threshold)"
                    },
                    {
                        "in": "query",
                        "name": "updated_after",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "description": "Only return rules updated after a given date"
                    },
                    {
                        "in": "query",
                        "name": "include_disabled",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "description": "If set to True, disabled rules are also considered"
                    },
                    {
                        "in": "query",
                        "name": "include_deleted",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "description": "If set to True, deleted rules are also considered"
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "UUIDs of the rules to pull"
                    },
                    {
                        "in": "query",
                        "name": "match[definition_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "UUIDs of the definition of rules to pull"
                    },
                    {
                        "in": "query",
                        "name": "requested_fields",
                        "required": false,
                        "type": "string",
                        "description": "List of fields that _must_ be returned, do not specify to pull all fields"
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/private/rules-catalog/compilation": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    }
                },
                "summary": "Report a compilation of a rule",
                "description": "Needs application token",
                "operationId": "post_report_rules_compilation_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "rule_uuid",
                        "required": true,
                        "type": "string",
                        "description": "The uuid of the rule"
                    },
                    {
                        "in": "query",
                        "name": "success",
                        "required": true,
                        "type": "boolean",
                        "description": "True indicates the compilation was successfull"
                    },
                    {
                        "in": "query",
                        "name": "message",
                        "required": false,
                        "type": "string",
                        "description": "Compilation report"
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/private/rules-catalog/definitions": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RulesDefinitionListSchema"
                        }
                    }
                },
                "summary": "Pull all rule definitions",
                "description": "Requires an application token\n\nThe following permissions are required:\n - â€œSIC_PULL_RULESâ€ (`6edf3c4b-30a0-4790-8322-6a5b3f8f9b5d`)",
                "operationId": "get_pull_rule_definitions_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "type of the template (allowed values are cti, correlation, threshold)"
                    },
                    {
                        "in": "query",
                        "name": "match[definition_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "UUIDs of the definition of rules to pull"
                    }
                ],
                "tags": [
                    "worker-rules"
                ]
            }
        },
        "/sic/conf/alerts/categories": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/CategoryListSchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    }
                },
                "summary": "List alerts categories",
                "description": "An alert category contains multiple alerts types sharing common properties that define the category\n\nExample:\n    - Abusive-usage\n    - Malicious-code\n    - Information-gathering\n\nThe categories and types are based on eCSIRT taxonomy.",
                "operationId": "get_alert_categories_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    }
                ],
                "tags": [
                    "alerts"
                ]
            }
        },
        "/sic/conf/alerts/types": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/AlertTypeListSchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    }
                },
                "summary": "List alerts types",
                "description": "of given categories\n\nOne can filter types given\n* the category that the type belongs to (`match[category_uuid]` and `match[category_name]`),\n* the name of the type (`match[type_name]`),\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, â€œ,â€) without any spaces. If multiple values are present, the match is treated as a logical OR.",
                "operationId": "get_alert_types_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[category_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match alerts categories by their uuids (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[category_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match alerts categories by their names (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match alerts types by their names (separated by commas)."
                    }
                ],
                "tags": [
                    "alerts"
                ]
            }
        },
        "/sic/conf/archives": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ArchiveSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "Create a new archive",
                "description": "The provided details are used to specify the archive to create.\n\nThe following permissions are required:\n - â€œManage archivesâ€ (`0b764957-9760-442a-a2cd-b6f69ad24c92`)",
                "operationId": "post_archives_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "description": "The name of the archive."
                    },
                    {
                        "in": "query",
                        "name": "provider",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "aws_s3",
                            "ovh_swift"
                        ],
                        "description": "The provider to use to store snapshots"
                    },
                    {
                        "in": "query",
                        "name": "settings",
                        "required": true,
                        "description": "The settings to generate and store snapshots"
                    },
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The community of the archive"
                    },
                    {
                        "in": "query",
                        "name": "encryption_public_key",
                        "required": false,
                        "type": "string",
                        "description": "A GPG public key to encrypt the archive"
                    }
                ],
                "tags": [
                    "archives"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ArchivesSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "List archives",
                "description": "An archive is a configuration to generate snapshots of events received by SEKOIA.IO\nThis paginated endpoint list all archives. A set of filters can be\nspecified to focus on certain archives.\n\nOne can filter archives given\n* the identifier of the archive (`match[uuid]`),\n* the name of the archive (`match[name]`)\n* the provider used to store snapshot (`match[provider]`)\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, â€œ,â€) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe following permissions are required:\n - â€œView archivesâ€ (`4e3febb2-1028-4509-8dea-7cc96eb4ae30`)",
                "operationId": "get_archives_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match archives by their uuid"
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match archives by their name"
                    },
                    {
                        "in": "query",
                        "name": "match[provider]",
                        "required": false,
                        "type": "string",
                        "description": "Match archives by their provider"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": [
                            "Sort returned templates (accepted values: ",
                            "'created_at', 'updated_at', 'name', 'provider')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "archives"
                ]
            }
        },
        "/sic/conf/archives/views": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ViewSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "Create a new view",
                "description": "The provided details are used to specify the view to create.\n\nThe following permissions are required:\n - â€œManage views from archiveâ€ (`3b439d04-f2c4-4936-aa68-27890a31a3af`)",
                "operationId": "post_views_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "description": "The name of the view."
                    },
                    {
                        "in": "query",
                        "name": "date_start",
                        "required": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "The start date for events retrieved from archive."
                    },
                    {
                        "in": "query",
                        "name": "date_end",
                        "required": true,
                        "type": "string",
                        "format": "date-time",
                        "description": "The end date for events retrieved from archive."
                    },
                    {
                        "in": "query",
                        "name": "archive_uuid",
                        "required": true,
                        "type": "string",
                        "description": "The uuid of the archive."
                    }
                ],
                "tags": [
                    "views"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ViewsSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "List view",
                "description": "A view is a configuration to retrieve snapshots of events stored by SEKOIA.IO\nThis paginated endpoint list all views. A set of filters can be\nspecified to focus on certain views.\n\nOne can filter views given\n* the identifier of the view (`match[uuid]`),\n* the name of the view (`match[name]`)\n* the identifier of the archive (`match[archive_uuid]`)\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, â€œ,â€) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nViews can be sorted given\n* their creation date (`sort=created_at`),\n* their update date (`sort=updated_at`),\n* their name (`sort=name`),\n* their identifier (`sort=uuid`),\n* their identifier of their archive (`sort=archive_uuid`),\n\nOne can sort ascending or descending by specifying `direction=asc` or `direction=desc`.\n\nThe following permissions are required:\n - â€œView archivesâ€ (`d8f1415e-ea06-4c57-876e-f9b3560038be`)",
                "operationId": "get_views_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match views by their uuid"
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match views by their name"
                    },
                    {
                        "in": "query",
                        "name": "match[archive_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match views by the identifier of their archive"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": [
                            "Sort returned templates (accepted values: ",
                            "'created_at', 'updated_at', 'name', 'uuid', 'archive_uuid')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "views"
                ]
            }
        },
        "/sic/conf/archives/views/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ViewSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "description": "Unknown view"
                    }
                },
                "summary": "Update a view",
                "description": "The provided details are used to specify the view to update.\n\nThe following permissions are required:\n - â€œManage views from archiveâ€ (`3b439d04-f2c4-4936-aa68-27890a31a3af`)",
                "operationId": "put_view_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string",
                        "description": "The name of the archive."
                    }
                ],
                "tags": [
                    "views"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ViewSchema"
                        }
                    },
                    "404": {
                        "description": "Unknown view"
                    }
                },
                "summary": "Get a view",
                "description": "The following permissions are required:\n - â€œView archivesâ€ (`d8f1415e-ea06-4c57-876e-f9b3560038be`)",
                "operationId": "get_view_resource",
                "tags": [
                    "views"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "404": {
                        "description": "Unknown view"
                    }
                },
                "summary": "Delete a view",
                "description": "The following permissions are required:\n - â€œManage views from archiveâ€ (`3b439d04-f2c4-4936-aa68-27890a31a3af`)",
                "operationId": "delete_view_resource",
                "tags": [
                    "views"
                ]
            }
        },
        "/sic/conf/archives/{archive_uuid}/snapshots": {
            "parameters": [
                {
                    "name": "archive_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SnapshotsSchema"
                        }
                    },
                    "404": {
                        "description": "Unknown archive"
                    }
                },
                "summary": "List snapshots of an archive",
                "description": "A snapshot is a set of security events stored in a cold storage.\nThis paginated endpoint list all snapshots. A set of filters can be\nspecified to focus on certain snapshots.\n\nOne can filter snapshots given\n* the identifier of the snapshot (`match[uuid]`),\n* the name of the snapshot (`match[name]`)\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, â€œ,â€) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe following permissions are required:\n - â€œView archivesâ€ (`4e3febb2-1028-4509-8dea-7cc96eb4ae30`)",
                "operationId": "get_snapshots_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match archives by their uuid"
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match archives by their name"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": [
                            "Sort returned templates (accepted values: ",
                            "'created_at', 'name')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "archives"
                ]
            }
        },
        "/sic/conf/archives/{archive_uuid}/snapshots/{uuid}": {
            "parameters": [
                {
                    "name": "archive_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SnapshotSchema"
                        }
                    },
                    "404": {
                        "description": "Unknown archive or snapshot"
                    }
                },
                "summary": "Get a snapshot",
                "description": "The following permissions are required:\n - â€œView archivesâ€ (`4e3febb2-1028-4509-8dea-7cc96eb4ae30`)",
                "operationId": "get_snapshot_resource",
                "tags": [
                    "archives"
                ]
            }
        },
        "/sic/conf/archives/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ArchiveSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "description": "Unknown archive"
                    }
                },
                "summary": "Update an archive",
                "description": "The provided details are used to specify the archive to update.\n\nThe following fields can be updated:\n- The name of the archive (`name`)\n- The settings of the archive (`settings`)\n\nWhen updating the settings, the payload is used as a patch:\n- defined keys with non-null value will be updated\n- defined keys with a null value will be deleted\n- undefined keys in the update payload will be not modified\n\nThe following permissions are required:\n - â€œManage archivesâ€ (`0b764957-9760-442a-a2cd-b6f69ad24c92`)",
                "operationId": "put_archive_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string",
                        "description": "The name of the archive."
                    },
                    {
                        "in": "query",
                        "name": "provider",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "aws_s3",
                            "ovh_swift"
                        ],
                        "description": "The provider to use to store snapshots"
                    },
                    {
                        "in": "query",
                        "name": "settings",
                        "required": false,
                        "description": "The settings to generate and store snapshots"
                    }
                ],
                "tags": [
                    "archives"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ArchiveSchema"
                        }
                    },
                    "404": {
                        "description": "Unknown archive"
                    }
                },
                "summary": "Get an archive",
                "description": "The following permissions are required:\n - â€œView archivesâ€ (`4e3febb2-1028-4509-8dea-7cc96eb4ae30`)",
                "operationId": "get_archive_resource",
                "tags": [
                    "archives"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "404": {
                        "description": "Unknown archive"
                    }
                },
                "summary": "Delete an archive",
                "description": "The following permissions are required:\n - â€œManage archivesâ€ (`0b764957-9760-442a-a2cd-b6f69ad24c92`)",
                "operationId": "delete_archive_resource",
                "tags": [
                    "archives"
                ]
            }
        },
        "/sic/conf/changes/202406-1": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Change2024061Schema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "List changes for the 202406-1 breaking change",
                "description": "This change removes many metadata fields from events.\n\nThe following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_generation_modes_resource",
                "tags": [
                    "changes"
                ]
            }
        },
        "/sic/conf/countermeasures": {
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid parameter"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/CountermeasuresSchema"
                        }
                    }
                },
                "summary": "Create a new set of countermeasures",
                "description": "The following permissions are required:\n - â€œCreate an edit countermeasure templatesâ€ (`5f697d27-f280-4674-b5e1-25a2c4072b1d`)",
                "operationId": "post_create_counter_measures_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "entity_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The entity that these countermeasures apply on"
                    },
                    {
                        "in": "query",
                        "name": "rule_definition_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The rule these countermeasures apply on"
                    },
                    {
                        "in": "query",
                        "name": "alert_type_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The alert type these countermeasures apply on"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "Name of the set of countermeasures"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "Detailed description of the countermeasures"
                    },
                    {
                        "in": "query",
                        "name": "start_on",
                        "required": false,
                        "type": "string",
                        "default": "",
                        "maxLength": 100,
                        "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
                    },
                    {
                        "in": "query",
                        "name": "countermeasures",
                        "required": true,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "Action steps of the countermeasure",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 100,
                                    "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                                },
                                "description": {
                                    "type": "string",
                                    "maxLength": 1000,
                                    "description": "Description of the action step"
                                },
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "textual",
                                        "openc2",
                                        "powershell",
                                        "sh"
                                    ],
                                    "description": "Type of the action"
                                },
                                "value": {
                                    "type": "string",
                                    "maxLength": 1000,
                                    "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                                },
                                "object": {
                                    "type": "object",
                                    "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used"
                                },
                                "next_steps": {
                                    "type": "array",
                                    "description": "The set of named next action step(s) to execute after completion of this action step",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "required": [
                                "name",
                                "type"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "relevance",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "description": "Relevance of the countermeasure"
                    },
                    {
                        "in": "query",
                        "name": "duration",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Duration required to apply the countermeasure"
                    },
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The community these countermeasures apply on"
                    }
                ],
                "tags": [
                    "countermeasures"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/CountermeasureListSchema"
                        }
                    }
                },
                "summary": "List set of countermeasures",
                "description": "The following permissions are required:\n - â€œRead countermeasure templatesâ€ (`cd2fe256-8ee0-4fcf-b255-cbc237a49ab9`)",
                "operationId": "get_create_counter_measures_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match countermeasure by their entity uuids (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[rule_definition_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match countermeasure by their rule definition uuids (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[alert_type]",
                        "required": false,
                        "type": "string",
                        "description": "Match countermeasure by their alert types (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match countermeasure by their names (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "range[relevance]",
                        "required": false,
                        "type": "string",
                        "description": "Filter countermeasures by their relevance."
                    }
                ],
                "tags": [
                    "countermeasures"
                ]
            }
        },
        "/sic/conf/countermeasures/alert_type/{alert_type_uuid}": {
            "parameters": [
                {
                    "name": "alert_type_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Resource not found"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CountermeasuresSchema"
                            }
                        }
                    }
                },
                "summary": "Get set of global countermeasures for a specific alert_type",
                "description": "The following permissions are required:\n - â€œRead countermeasure templatesâ€ (`cd2fe256-8ee0-4fcf-b255-cbc237a49ab9`)",
                "operationId": "get_alert_type_counter_measures_resource",
                "tags": [
                    "countermeasures"
                ]
            }
        },
        "/sic/conf/countermeasures/entity/{entity_uuid}/alert_type/{alert_type_uuid}": {
            "parameters": [
                {
                    "name": "entity_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "alert_type_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Resource not found"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CountermeasuresSchema"
                            }
                        }
                    }
                },
                "summary": "Get set of countermeasures for a specific alert_type within an entity",
                "description": "The following permissions are required:\n - â€œRead countermeasure templatesâ€ (`cd2fe256-8ee0-4fcf-b255-cbc237a49ab9`)",
                "operationId": "get_entity_counter_measures_resource",
                "tags": [
                    "countermeasures"
                ]
            }
        },
        "/sic/conf/countermeasures/rule/{rule_definition_uuid}": {
            "parameters": [
                {
                    "name": "rule_definition_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Resource not found"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CountermeasuresSchema"
                            }
                        }
                    }
                },
                "summary": "Get set of countermeasures for a specific rule",
                "description": "The following permissions are required:\n - â€œRead countermeasure templatesâ€ (`cd2fe256-8ee0-4fcf-b255-cbc237a49ab9`)",
                "operationId": "get_rule_counter_measures_resource",
                "tags": [
                    "countermeasures"
                ]
            }
        },
        "/sic/conf/countermeasures/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Resource not found"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/CountermeasuresSchema"
                        }
                    }
                },
                "summary": "Update countermeasures",
                "description": "The following permissions are required:\n - â€œCreate an edit countermeasure templatesâ€ (`5f697d27-f280-4674-b5e1-25a2c4072b1d`)",
                "operationId": "put_counter_measures_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "start_on",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "maxLength": 100,
                        "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
                    },
                    {
                        "in": "query",
                        "name": "countermeasures",
                        "required": true,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "Action steps of the countermeasure",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 100,
                                    "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                                },
                                "description": {
                                    "type": "string",
                                    "maxLength": 1000,
                                    "description": "Description of the action step"
                                },
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "textual",
                                        "openc2",
                                        "powershell",
                                        "sh"
                                    ],
                                    "description": "Type of the action"
                                },
                                "value": {
                                    "type": "string",
                                    "maxLength": 1000,
                                    "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                                },
                                "object": {
                                    "type": "object",
                                    "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used"
                                },
                                "next_steps": {
                                    "type": "array",
                                    "description": "The set of named next action step(s) to execute after completion of this action step",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "required": [
                                "name",
                                "type"
                            ]
                        }
                    }
                ],
                "tags": [
                    "countermeasures"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "Resource not found"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/CountermeasuresSchema"
                        }
                    }
                },
                "summary": "Get set of countermeasures",
                "description": "The following permissions are required:\n - â€œRead countermeasure templatesâ€ (`cd2fe256-8ee0-4fcf-b255-cbc237a49ab9`)",
                "operationId": "get_counter_measures_resource",
                "tags": [
                    "countermeasures"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Resource not found"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Delete countermeasures",
                "description": "The following permissions are required:\n - â€œDelete countermeasure templatesâ€ (`08e71056-8447-4017-9267-9bda304d7ef8`)",
                "operationId": "delete_counter_measures_resource",
                "tags": [
                    "countermeasures"
                ]
            }
        },
        "/sic/conf/entities": {
            "post": {
                "responses": {
                    "409": {
                        "description": "Invalid parameter"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EntitySchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Create new entity",
                "description": "The following permissions are required:\n - â€œManage entitiesâ€ (`63ab3e47-cde3-4e8a-80d4-26f1cd724a4e`)",
                "operationId": "post_entities_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the entity"
                    },
                    {
                        "in": "query",
                        "name": "entity_id",
                        "required": true,
                        "type": "string",
                        "description": "The Id of the entity"
                    },
                    {
                        "in": "query",
                        "name": "alerts_generation",
                        "required": true,
                        "type": "string",
                        "description": "The uuid of the generation mode"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The description of the entity"
                    },
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The community of the entity"
                    }
                ],
                "tags": [
                    "entities"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/ListEntitySchema"
                        }
                    }
                },
                "summary": "List entities",
                "description": "This endpoint can be used to retrieve all the configured entities.\n\nOne can filter entities given\n* the name (with joker) (`match[name]`),\n* the unique identifier (`match[uuid]`)\n* the number of intakes (`range[number_of_intakes]`)\n* the entity_id (`match[entity_id]`),\n\nEntities can be sorted given their\n* creation dates (`sort=created_at`),\n* update dates (`sort=updated_at`),\n* names (`sort=name`),\n* number of intakes (`sort=number_of_intakes`),\n\nThe following permissions are required:\n - â€œView entitiesâ€ (`0d9c0f86-fbcb-4db8-8842-f7451e4705b2`)",
                "operationId": "get_entities_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match entities by their unique identifiers (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match entities by their names (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[entity_id]",
                        "required": false,
                        "type": "string",
                        "description": "Match entities by their entity_ids (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "range[number_of_intakes]",
                        "required": false,
                        "type": "string",
                        "description": "Match entities by their number of intakes"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": "Sort returned entities (accepted values: 'created_at', 'updated_at', 'name', 'number_of_intakes')."
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "weird tag to test"
                ]
            }
        },
        "/sic/conf/entities/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown customer or entity"
                    },
                    "409": {
                        "description": "Invalid parameter"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EntitySchema"
                        }
                    }
                },
                "summary": "Update entity",
                "description": "The following permissions are required:\n - â€œManage entitiesâ€ (`63ab3e47-cde3-4e8a-80d4-26f1cd724a4e`)",
                "operationId": "put_entity_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the entity"
                    },
                    {
                        "in": "query",
                        "name": "entity_id",
                        "required": true,
                        "type": "string",
                        "description": "The Id of the entity"
                    },
                    {
                        "in": "query",
                        "name": "alerts_generation",
                        "required": true,
                        "type": "string",
                        "description": "The uuid of the generation mode"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The description of the entity"
                    },
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The community of the entity"
                    }
                ],
                "tags": [
                    "entities"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "Unknown entity"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EntitySchema"
                        }
                    }
                },
                "summary": "Get single entity",
                "description": "The following permissions are required:\n - â€œView entitiesâ€ (`0d9c0f86-fbcb-4db8-8842-f7451e4705b2`)",
                "operationId": "get_entity_resource",
                "tags": [
                    "entities"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Entity deleted"
                    },
                    "404": {
                        "description": "Unknown customer or entity"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Delete entity",
                "description": "The following permissions are required:\n - â€œDelete entitiesâ€ (`6557cfbb-7065-4e32-9648-6f65d242393e`)",
                "operationId": "delete_entity_resource",
                "tags": [
                    "entities"
                ]
            }
        },
        "/sic/conf/events": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/EventsSchema"
                        }
                    }
                },
                "summary": "List the events for the user community",
                "description": "(deprecated)\n\nThis endpoint is deprecated, use /events/search/jobs instead.\n\nIt is possible to specify the number of events to get using the `limit` query parameter.\nIt is possible to get only valid/invalid event using the `is_valid` query parameter.\nIt is possible to supply a query, as dork language, in the `term` parameter.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_events_list_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 50."
                    },
                    {
                        "in": "query",
                        "name": "is_valid",
                        "required": false,
                        "type": "boolean",
                        "default": null,
                        "x-nullable": true,
                        "description": "Flag to indicate we want only valid/invalid events"
                    },
                    {
                        "in": "query",
                        "name": "term",
                        "required": false,
                        "type": "string",
                        "description": "Content to search for"
                    },
                    {
                        "in": "query",
                        "name": "paging_token",
                        "required": false,
                        "type": "string",
                        "description": "Token used to request next page of results"
                    },
                    {
                        "in": "query",
                        "name": "latest_time",
                        "required": false,
                        "type": "string",
                        "description": "The earliest (inclusive) time bounds for the search. It can either be a UTC time (in seconds) or a relative time specifier (to now)."
                    },
                    {
                        "in": "query",
                        "name": "earliest_time",
                        "required": false,
                        "type": "string",
                        "description": "The latest (exclusive) time bounds for the search. It can either be a UTC time (in seconds) or a relative time specifier (to now))."
                    },
                    {
                        "in": "query",
                        "name": "view_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the view to used for searching events"
                    }
                ],
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/fields": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FieldsSchema"
                        }
                    }
                },
                "summary": "Get the available fields to dissect your events (deprecated)",
                "description": "The following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_fields_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 100,
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "limit a number of items (allowed range is 1-1000), default is 100."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    }
                ],
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/jobs": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EventSearchJobInfoSchema"
                        }
                    }
                },
                "summary": "Create an event search job",
                "description": "Earliest time and latest time denote the UTC time boundaries of the search.\nLatest time must be after the earliest time.\n\nThey accept both an absolute time or a relative time.\nThe absolute time must follow the ISO 8601 format such as:\n* `2011-11-04`\n* `2011-11-04T00:05:23`\n* `2011-11-04 00:05:23.283`\n\nPlease note that microsecond precision will be ignored (digits beyond the third decimal place).\n\nThe relative time format denotes a delta with the task execution time.\nIt follows the format `(\\+|-)(\\d+)(S|M|H|D|W)` with case ignored\nand accepts seconds (s), minutes (m), hours (h), days (d) and weeks (w).\nBelow are valid relative times:\n* `+3d`: three days in the future\n* `-2w`: two weeks before now\n* `-7d`: seven days before now\n* `now`: current time\n\nWhen a new search job is executed, the job is retained in the system for\na period of time, called the `results_ttl`. The job automaticaly expires\nwhen the `results_ttl` limit is reached. After a job expires,\nall its artifacts are deleted.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "post_event_search_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "term",
                        "required": true,
                        "type": "string",
                        "description": "Event search term"
                    },
                    {
                        "in": "query",
                        "name": "term_lang",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "dork",
                            "es-query-string"
                        ],
                        "description": "Optional language of the event search term. If undefined and term is not a valid dork search fallbacks to es-query-string search mode"
                    },
                    {
                        "in": "query",
                        "name": "filters",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "List of filters to apply",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "description": "Field to filter"
                                },
                                "value": {
                                    "description": "Value that the field should have"
                                },
                                "operator": {
                                    "type": "string",
                                    "enum": [
                                        "=",
                                        "startswith",
                                        "endswith",
                                        "contains",
                                        "exists",
                                        ">",
                                        ">=",
                                        "<",
                                        "<="
                                    ],
                                    "description": "Filter operator"
                                },
                                "excluded": {
                                    "type": "boolean",
                                    "description": "Should matches be excluded ?"
                                },
                                "disabled": {
                                    "type": "boolean",
                                    "description": "Is this filter disabled ?"
                                }
                            },
                            "required": [
                                "field",
                                "operator"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "earliest_time",
                        "required": true,
                        "type": "string",
                        "description": "Earliest time of the time range of the search"
                    },
                    {
                        "in": "query",
                        "name": "latest_time",
                        "required": true,
                        "type": "string",
                        "description": "Latest time of the time range of the search"
                    },
                    {
                        "in": "query",
                        "name": "results_ttl",
                        "required": false,
                        "type": "integer",
                        "default": 1800,
                        "minimum": 10,
                        "maximum": 86400,
                        "description": "The job time to leave (allowed range is 10-86400), default is 1800."
                    },
                    {
                        "in": "query",
                        "name": "view_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the view to used for searching events"
                    },
                    {
                        "in": "query",
                        "name": "visible",
                        "required": false,
                        "type": "boolean",
                        "description": "Define if job should be retrievable"
                    },
                    {
                        "in": "query",
                        "name": "only_eternal",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "description": "Only search inside eternal events"
                    },
                    {
                        "in": "query",
                        "name": "community_uuids",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "max_last_events",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of listed events"
                    },
                    {
                        "in": "query",
                        "name": "date_field",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "@timestamp",
                            "event.created"
                        ],
                        "description": "Optional name of field used for the event's date boundaries, @timestamp is used by default"
                    },
                    {
                        "in": "query",
                        "name": "storage",
                        "required": false,
                        "default": "hot",
                        "description": "Kind of storage to search"
                    }
                ],
                "tags": [
                    "events"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/EventSearchJobListSchema"
                        }
                    }
                },
                "summary": "List event search jobs",
                "description": "This endpoint can be use to retrieve all the event search jobs created\nby the community of the user.\n\nOne can filter jobs given\n* their author (`match[created_by]`),\n* their status (`match[status]`),\n* their term (`match[term]`)\n\nJobs can be sorted given\n* the date of creation (`sort=created_at`),\n* the end of execution (`sort=ended_at`),\n* the start of execution (`sort=started_at`),\n* the ttl of their results (`sort=results_ttl`),\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_search_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[status]",
                        "required": false,
                        "type": "string",
                        "description": "Match event search jobs by their status."
                    },
                    {
                        "in": "query",
                        "name": "match[created_by]",
                        "required": false,
                        "type": "string",
                        "description": "Match event search jobs by their author."
                    },
                    {
                        "in": "query",
                        "name": "match[term]",
                        "required": false,
                        "type": "string",
                        "description": "Match event search jobs by their term (support joker char denoted by '*')."
                    },
                    {
                        "in": "query",
                        "name": "match[view_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the view used to search events"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": [
                            "Sort returned jobs (accepted values: ",
                            "'created_at', 'ended_at', 'started_at', 'results_ttl')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/jobs/{event_search_job_uuid}": {
            "parameters": [
                {
                    "name": "event_search_job_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EventSearchJobInfoSchema"
                        }
                    }
                },
                "summary": "Update an event search job",
                "description": "One can use this method to update the `results_ttl` of the job.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "put_event_search_job_info_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "results_ttl",
                        "required": false,
                        "type": "integer",
                        "default": 600,
                        "minimum": 10,
                        "maximum": 86400,
                        "description": "The job time to leave (allowed range is 10-86400), default is 600."
                    }
                ],
                "tags": [
                    "events"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EventSearchJobInfoSchema"
                        }
                    }
                },
                "summary": "Get an event search job",
                "description": "The following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_search_job_info_resource",
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/jobs/{event_search_job_uuid}/cancel": {
            "parameters": [
                {
                    "name": "event_search_job_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EventSearchJobInfoSchema"
                        }
                    }
                },
                "summary": "Cancel execution",
                "description": "One can use this endpoint to prevent the execution of a pending event search job\nor to stop an in-progress search job.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "post_cancel_event_search_job_resource",
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/jobs/{event_search_job_uuid}/events": {
            "parameters": [
                {
                    "name": "event_search_job_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EventsSchema"
                        }
                    }
                },
                "summary": "Get the events found by an event search job in descending order",
                "description": "The `earliest_time` and `latest_time` parameters can be used\nto focus on the events of a specific timeframe. If a timeframe\nis specified, the returned total value is the number of events\nin the timeframe.\n\nIf the event search job expired, an HTTP 410 error is returned.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_search_job_events_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 100,
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "limit a number of items (allowed range is 1-1000), default is 100."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "latest_time",
                        "required": false,
                        "type": "number",
                        "description": "The earliest (inclusive) time bounds for the requested event in UTC time (in seconds)"
                    },
                    {
                        "in": "query",
                        "name": "earliest_time",
                        "required": false,
                        "type": "number",
                        "description": "The latest (exclusive) time bounds for the requested event in UTC time (in seconds)"
                    }
                ],
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/jobs/{event_search_job_uuid}/export": {
            "parameters": [
                {
                    "name": "event_search_job_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Export events",
                "description": "of the search job under various formats.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_export_event_search_job_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "format",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "csv",
                            "json"
                        ],
                        "description": "The format of the export"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "default": null,
                        "x-nullable": true,
                        "description": "An optional list of fields name to include in the export",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/jobs/{event_search_job_uuid}/fields": {
            "parameters": [
                {
                    "name": "event_search_job_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EventSearchJobFieldsSchema"
                        }
                    }
                },
                "summary": "Get the fields of the events found by an event search job",
                "description": "If the event search job expired, an HTTP 410 error is returned.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_search_job_fields_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 100,
                        "minimum": 1,
                        "maximum": 1000,
                        "description": "limit a number of items (allowed range is 1-1000), default is 100."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    }
                ],
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/jobs/{event_search_job_uuid}/histograms": {
            "parameters": [
                {
                    "name": "event_search_job_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistogramsSchema"
                        }
                    }
                },
                "summary": "Get the histograms of the events found by an event search job",
                "description": "If the event search job expired, an HTTP 410 error is returned.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_search_job_histograms_resource",
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/search/similar": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/EventSearchSimilarListSchema"
                        }
                    }
                },
                "summary": "Finds top-10 similar event search term",
                "description": "This endpoint returns at most 10 similar event search terms given\na provided query.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_search_similar",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "term",
                        "required": false,
                        "type": "string",
                        "description": "Event search term"
                    }
                ],
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/events/{event_id}": {
            "parameters": [
                {
                    "name": "event_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "404": {
                        "description": "Unknown event id"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Get single event",
                "description": "Value of `event_id` could be retrieved via the\nevent listing endpoint through the `__event_id` key.\n\nThat endpoint will return the same information than the\nclassic event listing API with also the STIX representation of\nthe event.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œView eventsâ€ (`1cbb91c7-e380-4d9a-98d1-6c850fda8e98`)",
                "operationId": "get_event_list_resource",
                "tags": [
                    "events"
                ]
            }
        },
        "/sic/conf/generation-modes": {
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid parameter"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GenerationModeSchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Create a new generation mode",
                "description": "The following permissions are required:\n - â€œSIC_WRITE_GENERATION_MODESâ€ (`54d8ae86-f010-4633-b45c-7e8c5a96eb51`)",
                "operationId": "post_generation_modes_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "name of the generation mode"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "description of the generation mode"
                    }
                ],
                "tags": [
                    "generation-modes"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/GenerationModeListSchema"
                        }
                    }
                },
                "summary": "List generation modes",
                "description": "The following permissions are required:\n - â€œView generation modeâ€ (`25868e4c-987f-41e6-8b09-86aeb4a2a22d`)",
                "operationId": "get_generation_modes_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    }
                ],
                "tags": [
                    "generation-modes"
                ]
            }
        },
        "/sic/conf/generation-modes/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown generation mode"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GenerationModeSchema"
                        }
                    }
                },
                "summary": "Update a generation mode",
                "description": "The following permissions are required:\n - â€œSIC_WRITE_GENERATION_MODESâ€ (`54d8ae86-f010-4633-b45c-7e8c5a96eb51`)",
                "operationId": "put_generation_mode_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "name of the generation mode"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "description of the generation mode"
                    }
                ],
                "tags": [
                    "generation-modes"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "Unknown generation mode"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GenerationModeSchema"
                        }
                    }
                },
                "summary": "Get a single generation mode",
                "description": "The following permissions are required:\n - â€œView generation modeâ€ (`25868e4c-987f-41e6-8b09-86aeb4a2a22d`)",
                "operationId": "get_generation_mode_resource",
                "tags": [
                    "generation-modes"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Unknown generation mode"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Delete a generation mode",
                "description": "The following permissions are required:\n - â€œSIC_WRITE_GENERATION_MODESâ€ (`54d8ae86-f010-4633-b45c-7e8c5a96eb51`)",
                "operationId": "delete_generation_mode_resource",
                "tags": [
                    "generation-modes"
                ]
            }
        },
        "/sic/conf/intakes": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IntakeSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "Create a new intake",
                "description": "The provided details are used to specify the intake to create.\nIf no name is specified, the intake will be named according to its uuid\n\nThe following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)",
                "operationId": "post_intakes_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string",
                        "description": "The name of the intake."
                    },
                    {
                        "in": "query",
                        "name": "entity_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the entity that the intake references"
                    },
                    {
                        "in": "query",
                        "name": "format_uuid",
                        "required": true,
                        "type": "string",
                        "description": "The identifier of the format to use to parse the events incoming on the intake"
                    },
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community to create the intake in"
                    },
                    {
                        "in": "query",
                        "name": "connector_configuration",
                        "required": false,
                        "type": "object",
                        "description": "The automation Configuration value used to automate pulling events for the intake"
                    },
                    {
                        "in": "query",
                        "name": "connector_module_configuration_uuid",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "The identifier of the connector module configuration"
                    }
                ],
                "tags": [
                    "Configuration"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IntakesSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "List intakes",
                "description": "intake is a configuration to handle the reception of events into the SIC application.\nThis paginated endpoint list all intakes. A set of filters can be\nspecified to focus on certain intakes.\n\nOne can filter intakes given\n* the entity of the intake (`match[entity_uuid]`, `match[entity_name]`)\n* the format of the intake (`match[format_uuid]`)\n* the intake key (`match[intake_key]`)\n* the intake's creation date (`date[created_at])\n* the intake's uuid (`match[uuid]`)\n\nThe following filters support wildcard matching:\n* `match[entity_name]`, `match[intake_key]`, `match[uuid]`, `match[name]`\n\nOne can exclude intakes given\n* the identifier of the intake (`exclude[uuid]`)\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, â€œ,â€) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)",
                "operationId": "get_intakes_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match intakes by their format uuid"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match intakes by their entity uuid"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match intakes by their entity name"
                    },
                    {
                        "in": "query",
                        "name": "match[intake_key]",
                        "required": false,
                        "type": "string",
                        "description": "Match intakes by their intake key"
                    },
                    {
                        "in": "query",
                        "name": "match[status]",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNKNOWN",
                            "STOPPED",
                            "STARTING",
                            "STOPPING",
                            "RUNNING",
                            "ERROR",
                            "CRITICAL_ERROR"
                        ],
                        "description": "Match intakes by their status"
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match intakes by their name"
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match intakes by their uuid"
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude intakes by their uuid."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "default": null,
                        "x-nullable": true,
                        "description": "Filter intakes by their creation date."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": [
                            "Sort returned templates (accepted values: ",
                            "'created_at', 'updated_at', 'name', 'entity_name', 'intake_key', 'status')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/sic/conf/intakes/configured-formats": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ConfiguredIntakeFormatSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "List Configured formats",
                "description": "One can filter formats given\n* the community uuid of the intake (`match[community_uuid]`)\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)",
                "operationId": "get_intake_formats_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    }
                ],
                "tags": [
                    "intakes"
                ]
            }
        },
        "/sic/conf/intakes/datasources": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ATTACKDatasourcesSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "List supported datasources",
                "description": "Datasource identify a source of data. It's defined by the MITRE ATT&CK framework.\nThis paginated endpoint list all datasources. A set of filters can be\nspecified to focus on certain datasources.\n\nOne can filter datasources given\n* the identifier of the datasource (`match[uuid]`),\n* the name of the datasource (`match[name]`)\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, â€œ,â€) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)",
                "operationId": "get_intake_data_source_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match datasources by their name"
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match datasources by their uuid"
                    }
                ],
                "tags": [
                    "intakes"
                ]
            }
        },
        "/sic/conf/intakes/optimization_rules": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/intake_optimization_rule_public_schema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "Create a new optimization rule",
                "description": "The provided details are used to specify the rule to create\n\nThe following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)\n - â€œManage all communities as an global administratorâ€ (`30b8cb5b-e2f2-4f09-9b17-d3f9fd63cffb`)",
                "operationId": "post_optimization_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "intake_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the intake to optimize"
                    },
                    {
                        "in": "query",
                        "name": "format_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the format to optimize"
                    },
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community to optimize"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "description": "The description of the rule"
                    },
                    {
                        "in": "query",
                        "name": "filters",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "The filters to apply",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "description": "The field to filter"
                                },
                                "operator": {
                                    "type": "string",
                                    "description": "The operator to apply"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "The value to filter"
                                }
                            },
                            "required": [
                                "field",
                                "operator"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "action",
                        "required": true,
                        "type": "integer",
                        "description": "The action to apply"
                    }
                ],
                "tags": [
                    "Intake Optimization Rules"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/list_of_optimization_rules_schema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "List Optimization rules",
                "description": "One can filter optimization rules given\n* the associated intake (`match[intake_uuid]`)\n* the associated community (`match[community_uuid]`)\n\nA filter parameter defines filtering on the specified `field`.\nA filter parameter can be specified any number of times, where each filter instance specifies\nan additional filter to be applied to the resulting data. Said another way,\nall filter fields are ANDed together. Each `field` MUST NOT occur more than once in a request.\n\nIt should be noted that each `match[]` MAY contain one or more values. Multiple values are separated by a comma\n(U+002C COMMA, â€œ,â€) without any spaces. If multiple values are present, the match is treated as a logical OR.\n\nThe following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œManage all communities as an global administratorâ€ (`30b8cb5b-e2f2-4f09-9b17-d3f9fd63cffb`)",
                "operationId": "get_optimization_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their intake uuid"
                    }
                ],
                "tags": [
                    "Intake Optimization Rules"
                ]
            }
        },
        "/sic/conf/intakes/optimization_rules/actions": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/list_of_optimization_actions_schema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "List Actions supported for Optimization rules",
                "description": "The following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œManage all communities as an global administratorâ€ (`30b8cb5b-e2f2-4f09-9b17-d3f9fd63cffb`)",
                "operationId": "get_optimization_rule_actions_resource",
                "tags": [
                    "Intake Optimization Rules"
                ]
            }
        },
        "/sic/conf/intakes/optimization_rules/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/intake_optimization_rule_public_schema"
                        }
                    },
                    "404": {
                        "description": "Unknown Optimization Rule"
                    }
                },
                "summary": "Get an Optimization rule",
                "description": "The following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)\n - â€œManage all communities as an global administratorâ€ (`30b8cb5b-e2f2-4f09-9b17-d3f9fd63cffb`)",
                "operationId": "get_optimization_rule_resource",
                "tags": [
                    "Intake Optimization Rules"
                ]
            },
            "delete": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Unknown Optimization Rule"
                    }
                },
                "summary": "Delete an optimization rule",
                "description": "The following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)\n - â€œManage all communities as an global administratorâ€ (`30b8cb5b-e2f2-4f09-9b17-d3f9fd63cffb`)",
                "operationId": "delete_optimization_rule_resource",
                "tags": [
                    "Intake Optimization Rules"
                ]
            }
        },
        "/sic/conf/intakes/optimization_rules/{uuid}/disable": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Unknown Optimization Rule"
                    }
                },
                "summary": "Disable an optimization rule",
                "description": "The following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)\n - â€œManage all communities as an global administratorâ€ (`30b8cb5b-e2f2-4f09-9b17-d3f9fd63cffb`)",
                "operationId": "post_disable_optimization_rule_resource",
                "tags": [
                    "Intake Optimization Rules"
                ]
            }
        },
        "/sic/conf/intakes/optimization_rules/{uuid}/enable": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Unknown Optimization Rule"
                    }
                },
                "summary": "Enable an optimization rule",
                "description": "The following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)\n - â€œManage all communities as an global administratorâ€ (`30b8cb5b-e2f2-4f09-9b17-d3f9fd63cffb`)",
                "operationId": "post_enable_optimization_rule_resource",
                "tags": [
                    "Intake Optimization Rules"
                ]
            }
        },
        "/sic/conf/intakes/{intake_uuid}/settings": {
            "parameters": [
                {
                    "name": "intake_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "The following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)",
                "operationId": "patch_intake_setting_resource",
                "tags": [
                    "intakes"
                ]
            },
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                },
                "description": "The following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)",
                "operationId": "post_intake_setting_resource",
                "tags": [
                    "intakes"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "description": "The following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)",
                "operationId": "get_intake_setting_resource",
                "tags": [
                    "intakes"
                ]
            }
        },
        "/sic/conf/intakes/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IntakeSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "edit an intake's name, entity uuid or format uuid",
                "description": "The following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)",
                "operationId": "patch_intake_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string",
                        "description": "The name of the intake"
                    },
                    {
                        "in": "query",
                        "name": "entity_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the entity that the intake references"
                    },
                    {
                        "in": "query",
                        "name": "format_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the format to use to parse the events incoming on the intake"
                    }
                ],
                "tags": [
                    "Configuration"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IntakeSchema"
                        }
                    },
                    "404": {
                        "description": "Unknown intake"
                    }
                },
                "summary": "Get an intake",
                "description": "The following permissions are required:\n - â€œView intakesâ€ (`2f0da527-2cf1-4a00-8f4c-033bfb43ddeb`)",
                "operationId": "get_intake_resource",
                "tags": [
                    "Configuration"
                ]
            },
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IntakeSchema"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "update a intake",
                "description": "The provided details are used to specify the intake to create.\n\nThe following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)",
                "operationId": "post_intake_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "type": "string",
                        "description": "The name of the intake"
                    }
                ],
                "tags": [
                    "Configuration"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "404": {
                        "description": "Unknown intake"
                    }
                },
                "summary": "Delete an intake",
                "description": "The following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)",
                "operationId": "delete_intake_resource",
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/sic/conf/intakes/{uuid}/settings/office365/oauth/validate_token": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/IntakeSettingOffice365ConsentRedirectUri"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    }
                },
                "summary": "OAuth endpoint for Microsoft Office 365",
                "description": "This endpoint is in charge\nof validating code and updating Office365IntakeSetting.\n\nThe following permissions are required:\n - â€œManage intakesâ€ (`efde546e-06db-4355-b2e5-84de1f66511b`)",
                "operationId": "post_office365_intake_setting_oidc_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "code",
                        "required": false,
                        "type": "string",
                        "description": "The authorization code to interact with Azure"
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "type": "string",
                        "description": "The token that identify the intake"
                    },
                    {
                        "in": "query",
                        "name": "error",
                        "required": false,
                        "type": "string",
                        "description": "The error code"
                    },
                    {
                        "in": "query",
                        "name": "error_description",
                        "required": false,
                        "type": "string",
                        "description": "The description of the error"
                    }
                ],
                "tags": [
                    "intakes"
                ]
            }
        },
        "/sic/conf/rules-catalog/compilation-reports/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/compilation_reports_list"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "List compilation reports",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_compilation_reports_resources",
                "tags": [
                    "compilation-reports"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Delete all compilation reports",
                "description": "The following permissions are required:\n - â€œDelete all compilation reportsâ€ (`5316f89e-9dea-487b-9bb8-6a95d817abba`)",
                "operationId": "delete_compilation_reports_resources",
                "tags": [
                    "compilation-reports"
                ]
            }
        },
        "/sic/conf/rules-catalog/compilation-reports/cti/{rule_definition_uuid}/daily": {
            "parameters": [
                {
                    "name": "rule_definition_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/daily_c_t_i_schema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Get an overview of CTI compilation reports for a given time range",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_daily_cti_compilation_reports",
                "tags": [
                    "compilation-reports"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules": {
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid parameter"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MultiTenantRuleSchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Create a new rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_multi_tenant_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the rule"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "description": "The type of the rule"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": true,
                        "type": "string",
                        "x-nullable": true,
                        "maxLength": 1000,
                        "description": "The descrition of the rule"
                    },
                    {
                        "in": "query",
                        "name": "payload",
                        "required": true,
                        "type": "string",
                        "description": "The payload of the rule"
                    },
                    {
                        "in": "query",
                        "name": "severity",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "The severity of the rule"
                    },
                    {
                        "in": "query",
                        "name": "effort",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 4,
                        "description": "The effort of the rule"
                    },
                    {
                        "in": "query",
                        "name": "alert_type_uuid",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "description": "The identifier of the alert_type to associate to the rule"
                    },
                    {
                        "in": "query",
                        "name": "tags",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of tags associated to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "related_object_refs",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of reference of objects related to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of datasources identifier to associate to the rule",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_fields",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of fields to display for matched events",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "description": "Field to pre-select"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Override default description for field"
                                }
                            },
                            "required": [
                                "description",
                                "field"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": true,
                        "type": "boolean",
                        "description": "Is the rule enabled?"
                    },
                    {
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The parameters of the rule",
                        "items": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "type": "string",
                                    "description": "The uuid of the parameter"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the parameter"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "The value of the parameter"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_entities",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all entities?"
                    },
                    {
                        "in": "query",
                        "name": "entities",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of entities the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_assets",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all assets?"
                    },
                    {
                        "in": "query",
                        "name": "assets",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of assets identifiers the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "goal",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A high-level description explaining the contribution of the rule"
                    },
                    {
                        "in": "query",
                        "name": "false_positives",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A possible legitimate usage which can raise a false alert"
                    },
                    {
                        "in": "query",
                        "name": "similarity_strategy",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "Similarity Strategy used by this rule. Should be a list of field names.",
                        "items": {}
                    },
                    {
                        "in": "query",
                        "name": "available_for_subcommunities",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-nullable": true,
                        "description": "Is the rule available for subcommunities (if applicable)"
                    },
                    {
                        "in": "query",
                        "name": "exclude_assets",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed assets excluded or included"
                    },
                    {
                        "in": "query",
                        "name": "exclude_entities",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed entities excluded or included"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MultiTenantRulesSchema"
                        }
                    }
                },
                "summary": "List rules in multi-tenant mode",
                "description": "This endpoint can be use to retrieve all rules for multiple communities.\n\nThe following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_multi_tenant_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "uuid",
                            "name",
                            "effort",
                            "severity",
                            "type",
                            "created_at",
                            "updated_at"
                        ],
                        "description": [
                            "Sort returned rules (accepted values: ",
                            "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/disabled": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    }
                },
                "summary": "Disable filtered rules",
                "description": "Disable all rules matching the set of specified filters.\n\nThe following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_multi_tenant_disable_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuids",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "The identifiers of the communities",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "uuid",
                            "name",
                            "effort",
                            "severity",
                            "type",
                            "created_at",
                            "updated_at"
                        ],
                        "description": [
                            "Sort returned rules (accepted values: ",
                            "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/enabled": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    }
                },
                "summary": "Enable filtered rules",
                "description": "Enable all rules matching the set of specified filters.\n\nThe following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_multi_tenant_enable_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuids",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "The identifiers of the communities",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "uuid",
                            "name",
                            "effort",
                            "severity",
                            "type",
                            "created_at",
                            "updated_at"
                        ],
                        "description": [
                            "Sort returned rules (accepted values: ",
                            "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/matrix": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MatrixSchema"
                        }
                    }
                },
                "summary": "List rules with their related object references, datasources, and activation flags",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_multi_tenant_related_object_refs_per_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/matrix/attack-navigator": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MatrixAttackNavigatorSchema"
                        }
                    }
                },
                "summary": "Get attack navigator matrix with the MITRE technique ids",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_multi_tenant_related_object_mitre_refs_per_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/setting": {
            "put": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleSettingSchema"
                        }
                    }
                },
                "summary": "Update rules' setting",
                "description": "The following permissions are required:\n - â€œManage rules settingsâ€ (`f116f322-2789-4197-be14-39d5e3198e6c`)",
                "operationId": "put_multi_tenant_rule_setting_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "effort_threshold_for_auto_activation",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4,
                        "description": "The effort threshold to enable automatically new rules from catalog"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleSettingSchema"
                        }
                    }
                },
                "summary": "Get rules' setting",
                "description": "The following permissions are required:\n - â€œManage rules settingsâ€ (`f116f322-2789-4197-be14-39d5e3198e6c`)",
                "operationId": "get_multi_tenant_rule_setting_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid parameter"
                    },
                    "404": {
                        "description": "Unknown rule"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MultiTenantRuleSchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Update a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_multi_tenant_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the rule"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "description": "The type of the rule"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": true,
                        "type": "string",
                        "x-nullable": true,
                        "maxLength": 1000,
                        "description": "The descrition of the rule"
                    },
                    {
                        "in": "query",
                        "name": "payload",
                        "required": true,
                        "type": "string",
                        "description": "The payload of the rule"
                    },
                    {
                        "in": "query",
                        "name": "severity",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "The severity of the rule"
                    },
                    {
                        "in": "query",
                        "name": "effort",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 4,
                        "description": "The effort of the rule"
                    },
                    {
                        "in": "query",
                        "name": "alert_type_uuid",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "description": "The identifier of the alert_type to associate to the rule"
                    },
                    {
                        "in": "query",
                        "name": "tags",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of tags associated to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "related_object_refs",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of reference of objects related to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of datasources identifier to associate to the rule",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_fields",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of fields to display for matched events",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "description": "Field to pre-select"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Override default description for field"
                                }
                            },
                            "required": [
                                "description",
                                "field"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": true,
                        "type": "boolean",
                        "description": "Is the rule enabled?"
                    },
                    {
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The parameters of the rule",
                        "items": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "type": "string",
                                    "description": "The uuid of the parameter"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the parameter"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "The value of the parameter"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_entities",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all entities?"
                    },
                    {
                        "in": "query",
                        "name": "entities",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of entities the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_assets",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all assets?"
                    },
                    {
                        "in": "query",
                        "name": "assets",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of assets identifiers the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "goal",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A high-level description explaining the contribution of the rule"
                    },
                    {
                        "in": "query",
                        "name": "false_positives",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A possible legitimate usage which can raise a false alert"
                    },
                    {
                        "in": "query",
                        "name": "similarity_strategy",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "Similarity Strategy used by this rule. Should be a list of field names.",
                        "items": {}
                    },
                    {
                        "in": "query",
                        "name": "available_for_subcommunities",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-nullable": true,
                        "description": "Is the rule available for subcommunities (if applicable)"
                    },
                    {
                        "in": "query",
                        "name": "exclude_assets",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed assets excluded or included"
                    },
                    {
                        "in": "query",
                        "name": "exclude_entities",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed entities excluded or included"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MultiTenantRuleSchema"
                        }
                    }
                },
                "summary": "Get a rule (multi-tenant mode)",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_multi_tenant_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "success"
                    }
                },
                "summary": "Delete a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "delete_multi_tenant_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/{uuid}/alert-filters": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "description": "Unknown rule"
                    },
                    "409": {
                        "description": "No instance for this rule, it was never enabled"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/AlertFilterSchema"
                        }
                    }
                },
                "summary": "Add a new alert filter to a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_multi_tenant_alert_filters_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The description of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "exclusion_pattern",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "description": "The STIX observation expression that models the exclusion pattern"
                    },
                    {
                        "in": "query",
                        "name": "expires_at",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "x-nullable": true,
                        "description": "Expiration date of the alert filter"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "409": {
                        "description": "No instance for this rule, it was never enabled"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MultiTenantAlertFiltersSchema"
                        }
                    }
                },
                "summary": "List a rule's alert filters",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_multi_tenant_alert_filters_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match community uuids by their uuids (separated by commas)."
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/{uuid}/alert-filters/{alertfilter_uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "alertfilter_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown rule or alert filter"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/AlertFilterSchema"
                        }
                    }
                },
                "summary": "Update a rule's alert filter",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_multi_tenant_alert_filter_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The description of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "exclusion_pattern",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "description": "The STIX observation expression that models the exclusion pattern"
                    },
                    {
                        "in": "query",
                        "name": "expires_at",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "x-nullable": true,
                        "description": "Expiration date of the alert filter"
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "success"
                    },
                    "404": {
                        "description": "Unknown rule or alert filter"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Delete a rule's alert filter",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "delete_multi_tenant_alert_filter_resource",
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/{uuid}/disabled": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MultiTenantRuleSchema"
                        }
                    }
                },
                "summary": "Disable a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_disable_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuids",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "The identifiers of the communities",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/rules/{uuid}/enabled": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MultiTenantRuleSchema"
                        }
                    }
                },
                "summary": "Enable a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_multi_tenant_enable_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuids",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "description": "The identifiers of the communities",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/multi-tenant/tags": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleTagsSchema"
                        }
                    }
                },
                "summary": "List tags of rules",
                "description": "This endpoint can be use to retrieve all the tags available for rules.\n\nThe following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_multi_tenant_rule_tags_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match tags by their identifiers (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match tags by their names (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": [
                            "Sort returned tags (accepted values: ",
                            "'uuid', 'name')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog-multi-tenant"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules": {
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid parameter"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MergedRuleSchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Create a new rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the rule"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "description": "The type of the rule"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": true,
                        "type": "string",
                        "x-nullable": true,
                        "maxLength": 1000,
                        "description": "The descrition of the rule"
                    },
                    {
                        "in": "query",
                        "name": "payload",
                        "required": true,
                        "type": "string",
                        "description": "The payload of the rule"
                    },
                    {
                        "in": "query",
                        "name": "severity",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "The severity of the rule"
                    },
                    {
                        "in": "query",
                        "name": "effort",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 4,
                        "description": "The effort of the rule"
                    },
                    {
                        "in": "query",
                        "name": "alert_type_uuid",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "description": "The identifier of the alert_type to associate to the rule"
                    },
                    {
                        "in": "query",
                        "name": "tags",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of tags associated to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "related_object_refs",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of reference of objects related to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of datasources identifier to associate to the rule",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_fields",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of fields to display for matched events",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "description": "Field to pre-select"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Override default description for field"
                                }
                            },
                            "required": [
                                "description",
                                "field"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": true,
                        "type": "boolean",
                        "description": "Is the rule enabled?"
                    },
                    {
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The parameters of the rule",
                        "items": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "type": "string",
                                    "description": "The uuid of the parameter"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the parameter"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "The value of the parameter"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_entities",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all entities?"
                    },
                    {
                        "in": "query",
                        "name": "entities",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of entities the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_assets",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all assets?"
                    },
                    {
                        "in": "query",
                        "name": "assets",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of assets identifiers the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "goal",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A high-level description explaining the contribution of the rule"
                    },
                    {
                        "in": "query",
                        "name": "false_positives",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A possible legitimate usage which can raise a false alert"
                    },
                    {
                        "in": "query",
                        "name": "similarity_strategy",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "Similarity Strategy used by this rule. Should be a list of field names.",
                        "items": {}
                    },
                    {
                        "in": "query",
                        "name": "available_for_subcommunities",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-nullable": true,
                        "description": "Is the rule available for subcommunities (if applicable)"
                    },
                    {
                        "in": "query",
                        "name": "exclude_assets",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed assets excluded or included"
                    },
                    {
                        "in": "query",
                        "name": "exclude_entities",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed entities excluded or included"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MergedRulesSchema"
                        }
                    }
                },
                "summary": "List rules",
                "description": "This endpoint can be use to retrieve all rules.\n\nThe following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "uuid",
                            "name",
                            "effort",
                            "severity",
                            "type",
                            "created_at",
                            "updated_at"
                        ],
                        "description": [
                            "Sort returned rules (accepted values: ",
                            "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/disabled": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    }
                },
                "summary": "Disable filtered rules",
                "description": "Disable all rules matching the set of specified filters.\n\nThe following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_disable_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "uuid",
                            "name",
                            "effort",
                            "severity",
                            "type",
                            "created_at",
                            "updated_at"
                        ],
                        "description": [
                            "Sort returned rules (accepted values: ",
                            "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/enabled": {
            "post": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "Success"
                    }
                },
                "summary": "Enable filtered rules",
                "description": "Enable all rules matching the set of specified filters.\n\nThe following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_enable_rules_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "uuid",
                            "name",
                            "effort",
                            "severity",
                            "type",
                            "created_at",
                            "updated_at"
                        ],
                        "description": [
                            "Sort returned rules (accepted values: ",
                            "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/matrix": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MatrixSchema"
                        }
                    }
                },
                "summary": "List rules with their related object references, datasources, and activation flags",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_related_object_refs_per_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "uuid",
                            "name",
                            "effort",
                            "severity",
                            "type",
                            "created_at",
                            "updated_at"
                        ],
                        "description": [
                            "Sort returned rules (accepted values: ",
                            "'uuid', 'name', 'effort', 'severity', 'type', 'created_at', 'updated_at')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/matrix/attack-navigator": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MatrixAttackNavigatorSchema"
                        }
                    }
                },
                "summary": "Get attack navigator matrix with the MITRE technique ids",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_related_object_mitre_refs_per_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/setting": {
            "put": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleSettingSchema"
                        }
                    }
                },
                "summary": "Update rules' setting",
                "description": "The following permissions are required:\n - â€œManage rules settingsâ€ (`f116f322-2789-4197-be14-39d5e3198e6c`)",
                "operationId": "put_rule_setting_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "effort_threshold_for_auto_activation",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4,
                        "description": "The effort threshold to enable automatically new rules from catalog"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            },
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleSettingSchema"
                        }
                    }
                },
                "summary": "Get rules' setting",
                "description": "The following permissions are required:\n - â€œManage rules settingsâ€ (`f116f322-2789-4197-be14-39d5e3198e6c`)",
                "operationId": "get_rule_setting_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/{uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "400": {
                        "description": "Invalid parameter"
                    },
                    "404": {
                        "description": "Unknown rule"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MergedRuleSchema"
                        }
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Update a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the rule"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "description": "The type of the rule"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": true,
                        "type": "string",
                        "x-nullable": true,
                        "maxLength": 1000,
                        "description": "The descrition of the rule"
                    },
                    {
                        "in": "query",
                        "name": "payload",
                        "required": true,
                        "type": "string",
                        "description": "The payload of the rule"
                    },
                    {
                        "in": "query",
                        "name": "severity",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "The severity of the rule"
                    },
                    {
                        "in": "query",
                        "name": "effort",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 4,
                        "description": "The effort of the rule"
                    },
                    {
                        "in": "query",
                        "name": "alert_type_uuid",
                        "required": true,
                        "type": "string",
                        "format": "uuid",
                        "description": "The identifier of the alert_type to associate to the rule"
                    },
                    {
                        "in": "query",
                        "name": "tags",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of tags associated to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "related_object_refs",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of reference of objects related to the rule",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "datasources",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of datasources identifier to associate to the rule",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event_fields",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of fields to display for matched events",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "string",
                                    "description": "Field to pre-select"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Override default description for field"
                                }
                            },
                            "required": [
                                "description",
                                "field"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": true,
                        "type": "boolean",
                        "description": "Is the rule enabled?"
                    },
                    {
                        "in": "query",
                        "name": "parameters",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The parameters of the rule",
                        "items": {
                            "type": "object",
                            "properties": {
                                "uuid": {
                                    "type": "string",
                                    "description": "The uuid of the parameter"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the parameter"
                                },
                                "value": {
                                    "type": "string",
                                    "description": "The value of the parameter"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_entities",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all entities?"
                    },
                    {
                        "in": "query",
                        "name": "entities",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of entities the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_assets",
                        "required": false,
                        "type": "boolean",
                        "x-nullable": true,
                        "description": "Should the rule be applied on all assets?"
                    },
                    {
                        "in": "query",
                        "name": "assets",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "The list of assets identifiers the rule should be applied on",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "goal",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A high-level description explaining the contribution of the rule"
                    },
                    {
                        "in": "query",
                        "name": "false_positives",
                        "required": false,
                        "type": "string",
                        "x-nullable": true,
                        "description": "A possible legitimate usage which can raise a false alert"
                    },
                    {
                        "in": "query",
                        "name": "similarity_strategy",
                        "required": false,
                        "collectionFormat": "multi",
                        "type": "array",
                        "x-nullable": true,
                        "description": "Similarity Strategy used by this rule. Should be a list of field names.",
                        "items": {}
                    },
                    {
                        "in": "query",
                        "name": "available_for_subcommunities",
                        "required": false,
                        "type": "boolean",
                        "default": false,
                        "x-nullable": true,
                        "description": "Is the rule available for subcommunities (if applicable)"
                    },
                    {
                        "in": "query",
                        "name": "exclude_assets",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed assets excluded or included"
                    },
                    {
                        "in": "query",
                        "name": "exclude_entities",
                        "required": false,
                        "type": "boolean",
                        "description": "Are the listed entities excluded or included"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MergedRuleSchema"
                        }
                    }
                },
                "summary": "Get a rule",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_rule_resource",
                "tags": [
                    "rules-catalog"
                ]
            },
            "delete": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "204": {
                        "description": "success"
                    }
                },
                "summary": "Delete a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "delete_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/{uuid}/alert-filters": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "responses": {
                    "400": {
                        "description": "Invalid parameters"
                    },
                    "404": {
                        "description": "Unknown rule"
                    },
                    "409": {
                        "description": "No instance for this rule, it was never enabled"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/AlertFilterSchema"
                        }
                    }
                },
                "summary": "Add a new alert filter to a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "post_alert_filters_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The description of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "exclusion_pattern",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "description": "The STIX observation expression that models the exclusion pattern"
                    },
                    {
                        "in": "query",
                        "name": "expires_at",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "x-nullable": true,
                        "description": "Expiration date of the alert filter"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            },
            "get": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "409": {
                        "description": "No instance for this rule, it was never enabled"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/AlertFiltersSchema"
                        }
                    }
                },
                "summary": "List a rule's alert filters",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_alert_filters_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/{uuid}/alert-filters/{alertfilter_uuid}": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "alertfilter_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown rule or alert filter"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/AlertFilterSchema"
                        }
                    }
                },
                "summary": "Update a rule's alert filter",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_alert_filter_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 100,
                        "description": "The name of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "description",
                        "required": false,
                        "type": "string",
                        "maxLength": 1000,
                        "description": "The description of the alert filter"
                    },
                    {
                        "in": "query",
                        "name": "exclusion_pattern",
                        "required": true,
                        "type": "string",
                        "minLength": 5,
                        "description": "The STIX observation expression that models the exclusion pattern"
                    },
                    {
                        "in": "query",
                        "name": "expires_at",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "x-nullable": true,
                        "description": "Expiration date of the alert filter"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "success"
                    },
                    "404": {
                        "description": "Unknown rule or alert filter"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    }
                },
                "summary": "Delete a rule's alert filter",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "delete_alert_filter_resource",
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/{uuid}/compatible-formats": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleFormatsAssociationSchema"
                        }
                    }
                },
                "summary": "Get a rule's compatible intake formats",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_rule_intake_format_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/{uuid}/disabled": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MergedRuleSchema"
                        }
                    }
                },
                "summary": "Disable a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_disable_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/rules/{uuid}/enabled": {
            "parameters": [
                {
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "responses": {
                    "404": {
                        "description": "Unknown rule"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/MergedRuleSchema"
                        }
                    }
                },
                "summary": "Enable a rule",
                "description": "The following permissions are required:\n - â€œManage rules and alert filtersâ€ (`180d5c46-61b6-46af-af9e-d9d84c871e18`)",
                "operationId": "put_enable_rule_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "community_uuid",
                        "required": false,
                        "type": "string",
                        "description": "The identifier of the community"
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/rules-catalog/tags": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RuleTagsSchema"
                        }
                    }
                },
                "summary": "List tags of rules",
                "description": "This endpoint can be use to retrieve all the tags available for rules.\n\nThe following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_rule_tags_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100,
                        "description": "limit a number of items (allowed range is 1-100), default is 20."
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "description": "a number of items to skip, default is 0."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match tags by their identifiers (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "description": "Match tags by their names (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string",
                        "description": [
                            "Sort returned tags (accepted values: ",
                            "'uuid', 'name')."
                        ]
                    },
                    {
                        "in": "query",
                        "name": "direction",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "description": "Direction of the sort (accepted values: 'asc', 'desc')."
                    }
                ],
                "tags": [
                    "rules-catalog"
                ]
            }
        },
        "/sic/conf/statistics/rules-catalog/counters": {
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/RulesCountersSchema"
                        }
                    }
                },
                "summary": "List rules' statistics",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_rules_counters_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "exclude[uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Exclude rules by their identifier (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[name]",
                        "required": false,
                        "type": "string",
                        "maxLength": 100,
                        "description": "Match rules by their name (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[type]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their type (allowed values are cti, correlation)"
                    },
                    {
                        "in": "query",
                        "name": "match[entity_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their entity (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "enabled",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules according their activation"
                    },
                    {
                        "in": "query",
                        "name": "match[effort]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their effort (separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "range[severity]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their severity (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[tag_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[tag_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their tags (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "date[created_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their creation date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "date[updated_at]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their modification date (bounds are separated by commas)"
                    },
                    {
                        "in": "query",
                        "name": "match[source]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by their source (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "verified",
                        "required": false,
                        "type": "boolean",
                        "description": "Match verified rules (or not)"
                    },
                    {
                        "in": "query",
                        "name": "match[related_object_ref]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the reference of related objects (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the identifier of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[datasource_name]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by the name of their datasources (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[search]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules according their name or their description (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "match[intake_format_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Match rules by compatible intake format uuid (separated by commas)."
                    },
                    {
                        "in": "query",
                        "name": "has_active_alert_filters",
                        "required": false,
                        "type": "boolean",
                        "description": "Match rules based on their instances' alert filters"
                    }
                ],
                "tags": [
                    "Statistics"
                ]
            }
        },
        "/sic/conf/statistics/rules-catalog/indicator-counter": {
            "get": {
                "responses": {
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Authentication failed"
                    },
                    "403": {
                        "description": "Insufficient permissions"
                    },
                    "200": {
                        "description": "Request fulfilled, document follows",
                        "schema": {
                            "$ref": "#/definitions/IndicatorCounterSchema"
                        }
                    }
                },
                "summary": "List statistics about the approximate number of indicators currently in use by detection",
                "description": "The following permissions are required:\n - â€œView Rules Catalogâ€ (`c4311344-c981-4ec4-b8e5-f8ee6aeb458d`)",
                "operationId": "get_rules_indicator_counters_resource",
                "parameters": [
                    {
                        "in": "query",
                        "name": "match[community_uuid]",
                        "required": false,
                        "type": "string",
                        "description": "Communities to match (separated by commas)."
                    }
                ],
                "tags": [
                    "Statistics"
                ]
            }
        }
    },
    "info": {
        "title": "API SIC",
        "version": 0,
        "description": "Manage SIC"
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "accessToken": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization"
        }
    },
    "security": [
        {
            "accessToken": []
        }
    ],
    "tags": [
        {
            "name": "entities",
            "description": "entities management endpoint"
        },
        {
            "name": "worker-rules",
            "description": "pull rules endpoint"
        },
        {
            "name": "generation-modes",
            "description": "alerts generation modes management endpoint"
        },
        {
            "name": "alerts",
            "description": "alerts management endpoint"
        },
        {
            "name": "countermeasures",
            "description": "countermeasures management endpoint"
        },
        {
            "name": "intakes",
            "description": "intakes management endpoint"
        },
        {
            "name": "Intake Optimization Rules",
            "description": "Optimization rules management endpoint"
        },
        {
            "name": "events",
            "description": "Last events listing endpoint"
        },
        {
            "name": "Statistics",
            "description": "Counters of resources in SIC"
        },
        {
            "name": "archives",
            "description": "archives management endpoint"
        },
        {
            "name": "views",
            "description": "views management endpoint"
        },
        {
            "name": "rules-catalog",
            "description": "Rules catalog management endpoint"
        },
        {
            "name": "compilation-reports"
        },
        {
            "name": "rules-catalog-multi-tenant",
            "description": "Multi-tenant rules catalog management endpoint"
        },
        {
            "name": "changes",
            "description": "review breaking changes"
        }
    ],
    "definitions": {
        "EntitySchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 100,
                    "description": "The name of the entity"
                },
                "entity_id": {
                    "type": "string",
                    "description": "The Id of the entity"
                },
                "alerts_generation": {
                    "type": "string",
                    "description": "The uuid of the generation mode"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "The descrition of the entity"
                },
                "community_uuid": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "number_of_intakes": {
                    "type": "integer"
                }
            },
            "required": [
                "alerts_generation",
                "community_uuid",
                "entity_id",
                "name",
                "uuid"
            ]
        },
        "ListEntitySchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the entity"
                            },
                            "entity_id": {
                                "type": "string",
                                "description": "The Id of the entity"
                            },
                            "alerts_generation": {
                                "type": "string",
                                "description": "The uuid of the generation mode"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "The descrition of the entity"
                            },
                            "community_uuid": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            },
                            "number_of_intakes": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "alerts_generation",
                            "community_uuid",
                            "entity_id",
                            "name",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "EntityListSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "The uuid of the entity"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the creation date of the ressource"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the update date of the ressource"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the entity"
                            },
                            "deleted": {
                                "type": "boolean",
                                "description": "The deletion status of the entity"
                            },
                            "generation_mode": {
                                "type": "string",
                                "description": "The name of the generation mode"
                            }
                        },
                        "required": [
                            "created_at",
                            "generation_mode",
                            "name",
                            "updated_at",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "ListCustomerSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "Total of existing customers"
                },
                "items": {
                    "type": "array",
                    "description": "Requested customers",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "name of the customer"
                            },
                            "customer_id": {
                                "type": "string",
                                "description": "id of the customer used for event association"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "description of the customer"
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "uuid of the community"
                            },
                            "uuid": {
                                "type": "string"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the creation date of the ressource"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the update date of the ressource"
                            },
                            "created_by": {
                                "type": "string"
                            },
                            "entities": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "The uuid of the entity"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "the creation date of the ressource"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "description": "the update date of the ressource"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the entity"
                                        },
                                        "deleted": {
                                            "type": "boolean",
                                            "description": "The deletion status of the entity"
                                        },
                                        "generation_mode": {
                                            "type": "string",
                                            "description": "The name of the generation mode"
                                        }
                                    },
                                    "required": [
                                        "created_at",
                                        "generation_mode",
                                        "name",
                                        "updated_at",
                                        "uuid"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "created_at",
                            "created_by",
                            "customer_id",
                            "name",
                            "updated_at",
                            "uuid"
                        ]
                    }
                }
            },
            "required": [
                "items",
                "total"
            ]
        },
        "ListArchivesSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "Total of existing customers"
                },
                "items": {
                    "type": "array",
                    "description": "Requested customers",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the creation date of the ressource"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the update date of the ressource"
                            },
                            "name": {
                                "type": "string"
                            },
                            "community_uuid": {
                                "type": "string"
                            },
                            "provider": {
                                "type": "string"
                            },
                            "settings": {
                                "type": "object"
                            },
                            "encryption_key": {
                                "type": "string",
                                "x-nullable": true
                            },
                            "validated": {
                                "type": "boolean",
                                "description": "Validity status of archive's config"
                            }
                        },
                        "required": [
                            "community_uuid",
                            "created_at",
                            "name",
                            "provider",
                            "settings",
                            "updated_at",
                            "uuid",
                            "validated"
                        ]
                    }
                }
            },
            "required": [
                "items",
                "total"
            ]
        },
        "RuleWorkerListSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The unique ressource ID"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the creation date of the ressource"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the update date of the ressource"
                            },
                            "definition_uuid": {
                                "type": "string",
                                "description": "The uuid of the definition of the rule"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the rule"
                            },
                            "type": {
                                "description": "cti|correlation|threshold"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "The status of the rule"
                            },
                            "deleted": {
                                "type": "boolean",
                                "description": "The deletion status of the rule"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "The descrition of the rule"
                            },
                            "rule": {
                                "type": "string",
                                "description": "The text of the rule"
                            },
                            "all_entities": {
                                "type": "boolean",
                                "description": "Boolean indicating if this rule applies to all entities"
                            },
                            "entity_uuids": {
                                "type": "array",
                                "description": "List of entity UUIDs this rule applies to",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "all_assets": {
                                "type": "boolean",
                                "description": "Boolean indicating if this rule applies to all assets"
                            },
                            "assets_uuids": {
                                "type": "array",
                                "description": "List of assets UUIDs this rule applies to",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "The uuid of the community using the rule"
                            },
                            "alert_filters": {
                                "type": "array",
                                "description": "List of alert-filters attached to the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "description": "The unique ressource ID"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the alert filter"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "The description of the alert filter"
                                        },
                                        "exclusion_pattern": {
                                            "type": "string",
                                            "description": "The STIX observation expression that models the exclusion pattern"
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "x-nullable": true,
                                            "description": "The creation date of the alert filter"
                                        },
                                        "created_by": {
                                            "type": "string",
                                            "description": "The profile who created the alert filter"
                                        },
                                        "created_by_type": {
                                            "type": "string",
                                            "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                                        },
                                        "expires_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "x-nullable": true,
                                            "description": "The expiration date of the alert filter"
                                        },
                                        "status": {
                                            "description": "Status of the Alert Filter (active or expired)"
                                        }
                                    },
                                    "required": [
                                        "created_at",
                                        "created_by",
                                        "created_by_type",
                                        "exclusion_pattern",
                                        "name",
                                        "status",
                                        "uuid"
                                    ]
                                }
                            },
                            "alert": {
                                "type": "object",
                                "properties": {
                                    "inherit_generation": {
                                        "type": "boolean",
                                        "description": "Boolean indicating if the entity's generation mode should be used"
                                    },
                                    "generation_mode": {
                                        "type": "string",
                                        "description": "The name of the generation mode"
                                    },
                                    "type": {
                                        "type": "object",
                                        "properties": {
                                            "category": {
                                                "type": "string",
                                                "description": "The Category of the alert"
                                            },
                                            "value": {
                                                "type": "string",
                                                "description": "The value of the type"
                                            },
                                            "description": {
                                                "type": "string",
                                                "maxLength": 1000,
                                                "description": "The description of the type"
                                            }
                                        },
                                        "required": [
                                            "category",
                                            "description",
                                            "value"
                                        ]
                                    },
                                    "countermeasures": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "entity_uuid": {
                                                    "type": "string",
                                                    "description": "The entity that these countermeasures apply on"
                                                },
                                                "rule_definition_uuid": {
                                                    "type": "string",
                                                    "description": "The rule these countermeasures apply on"
                                                },
                                                "alert_type_uuid": {
                                                    "type": "string",
                                                    "description": "The alert type these countermeasures apply on"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "minLength": 5,
                                                    "maxLength": 100,
                                                    "description": "Name of the set of countermeasures"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "maxLength": 1000,
                                                    "description": "Detailed description of the countermeasures"
                                                },
                                                "start_on": {
                                                    "type": "string",
                                                    "default": "",
                                                    "maxLength": 100,
                                                    "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
                                                },
                                                "countermeasures": {
                                                    "type": "array",
                                                    "description": "Action steps of the countermeasure",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "name": {
                                                                "type": "string",
                                                                "minLength": 1,
                                                                "maxLength": 100,
                                                                "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                                                            },
                                                            "description": {
                                                                "type": "string",
                                                                "maxLength": 1000,
                                                                "description": "Description of the action step"
                                                            },
                                                            "type": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "textual",
                                                                    "openc2",
                                                                    "powershell",
                                                                    "sh"
                                                                ],
                                                                "description": "Type of the action"
                                                            },
                                                            "value": {
                                                                "type": "string",
                                                                "maxLength": 1000,
                                                                "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                                                            },
                                                            "object": {
                                                                "type": "object",
                                                                "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used"
                                                            },
                                                            "next_steps": {
                                                                "type": "array",
                                                                "description": "The set of named next action step(s) to execute after completion of this action step",
                                                                "items": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        },
                                                        "required": [
                                                            "name",
                                                            "type"
                                                        ]
                                                    }
                                                },
                                                "relevance": {
                                                    "type": "integer",
                                                    "minimum": 0,
                                                    "description": "Relevance of the countermeasure"
                                                },
                                                "duration": {
                                                    "type": "string",
                                                    "maxLength": 100,
                                                    "description": "Duration required to apply the countermeasure"
                                                },
                                                "community_uuid": {
                                                    "type": "string",
                                                    "description": "The community these countermeasures apply on"
                                                },
                                                "uuid": {
                                                    "type": "string",
                                                    "description": "The unique ressource ID"
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "description": "the creation date of the ressource"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "description": "the update date of the ressource"
                                                }
                                            },
                                            "required": [
                                                "countermeasures",
                                                "created_at",
                                                "name",
                                                "relevance",
                                                "updated_at",
                                                "uuid"
                                            ]
                                        }
                                    },
                                    "severity": {
                                        "type": "integer",
                                        "description": "The severity of the rule"
                                    },
                                    "similarity_strategy": {
                                        "type": "array",
                                        "description": "Strategy to use to consider alerts to be similar",
                                        "items": {}
                                    }
                                },
                                "required": [
                                    "generation_mode",
                                    "inherit_generation",
                                    "severity",
                                    "type"
                                ]
                            },
                            "parameters": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 5,
                                            "maxLength": 100,
                                            "description": "The value of the parameter"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "The value of the parameter"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "value"
                                    ]
                                }
                            },
                            "related_object_refs": {
                                "type": "array",
                                "x-nullable": true,
                                "description": "Related STIX object ids",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "smart_descriptions": {
                                "type": "string",
                                "description": "Smart descriptions"
                            },
                            "exclude_assets": {
                                "type": "boolean",
                                "description": "Are the listed assets excluded or included"
                            },
                            "exclude_entities": {
                                "type": "boolean",
                                "description": "Are the listed entities excluded or included"
                            }
                        },
                        "required": [
                            "all_assets",
                            "all_entities",
                            "community_uuid",
                            "created_at",
                            "enabled",
                            "name",
                            "type",
                            "updated_at",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "RulesDefinitionListSchema": {
            "type": "object",
            "properties": {
                "has_more": {
                    "type": "boolean",
                    "description": "Boolean indicating if there are more rules to pull"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "The identifier of the rule"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the rule"
                            },
                            "type": {
                                "description": "The type of the rule"
                            },
                            "payload": {
                                "type": "string",
                                "description": "The payload of the rule"
                            },
                            "community_uuid": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The community uuid if the rule is attached to one"
                            },
                            "instances": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "The identifier of the instance of the rule"
                                        },
                                        "enabled": {
                                            "type": "boolean",
                                            "x-nullable": true,
                                            "description": "Is the rule enabled?"
                                        },
                                        "community_uuid": {
                                            "type": "string",
                                            "description": "The community uuid of the rule instance"
                                        },
                                        "all_entities": {
                                            "type": "boolean",
                                            "description": "Boolean indicating if this rule applies to all entities"
                                        },
                                        "entity_uuids": {
                                            "type": "array",
                                            "description": "List of entity UUIDs this rule applies to",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "all_assets": {
                                            "type": "boolean",
                                            "description": "Boolean indicating if this rule applies to all assets"
                                        },
                                        "assets_uuids": {
                                            "type": "array",
                                            "description": "List of assets UUIDs this rule applies to",
                                            "items": {
                                                "type": "string",
                                                "format": "uuid"
                                            }
                                        },
                                        "alert_filters": {
                                            "type": "array",
                                            "description": "List of alert-filters attached to the rule",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "uuid": {
                                                        "type": "string",
                                                        "description": "The unique ressource ID"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "description": "The name of the alert filter"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "description": "The description of the alert filter"
                                                    },
                                                    "exclusion_pattern": {
                                                        "type": "string",
                                                        "description": "The STIX observation expression that models the exclusion pattern"
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "x-nullable": true,
                                                        "description": "The creation date of the alert filter"
                                                    },
                                                    "created_by": {
                                                        "type": "string",
                                                        "description": "The profile who created the alert filter"
                                                    },
                                                    "created_by_type": {
                                                        "type": "string",
                                                        "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                                                    },
                                                    "expires_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "x-nullable": true,
                                                        "description": "The expiration date of the alert filter"
                                                    },
                                                    "status": {
                                                        "description": "Status of the Alert Filter (active or expired)"
                                                    }
                                                },
                                                "required": [
                                                    "created_at",
                                                    "created_by",
                                                    "created_by_type",
                                                    "exclusion_pattern",
                                                    "name",
                                                    "status",
                                                    "uuid"
                                                ]
                                            }
                                        },
                                        "exclude_assets": {
                                            "type": "boolean",
                                            "description": "Are the listed assets excluded or included"
                                        },
                                        "exclude_entities": {
                                            "type": "boolean",
                                            "description": "Are the listed entities excluded or included"
                                        }
                                    },
                                    "required": [
                                        "all_assets",
                                        "all_entities",
                                        "enabled",
                                        "uuid"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "uuid"
                        ]
                    }
                }
            },
            "required": [
                "has_more"
            ]
        },
        "GenerationModeSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "The unique ressource ID"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the creation date of the ressource"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the update date of the ressource"
                },
                "name": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 100,
                    "description": "name of the generation mode"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "description of the generation mode"
                }
            },
            "required": [
                "created_at",
                "name",
                "updated_at",
                "uuid"
            ]
        },
        "GenerationModeListSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The unique ressource ID"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the creation date of the ressource"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the update date of the ressource"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "name of the generation mode"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "description of the generation mode"
                            }
                        },
                        "required": [
                            "created_at",
                            "name",
                            "updated_at",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "CategoryListSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "Alert category uuid"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "Alert category name"
                            }
                        },
                        "required": [
                            "name",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "AlertTypeListSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "Alert type uuid"
                            },
                            "category_uuid": {
                                "type": "string",
                                "description": "Alert type category uuid"
                            },
                            "category_name": {
                                "type": "string",
                                "description": "Alert type category name"
                            },
                            "value": {
                                "type": "string",
                                "description": "Alert type name "
                            },
                            "detail": {
                                "type": "string",
                                "description": "Alert type detail"
                            },
                            "description": {
                                "type": "string",
                                "description": "Alert type description"
                            }
                        },
                        "required": [
                            "category_name",
                            "category_uuid",
                            "uuid",
                            "value"
                        ]
                    }
                }
            }
        },
        "CountermeasuresSchema": {
            "type": "object",
            "properties": {
                "entity_uuid": {
                    "type": "string",
                    "description": "The entity that these countermeasures apply on"
                },
                "rule_definition_uuid": {
                    "type": "string",
                    "description": "The rule these countermeasures apply on"
                },
                "alert_type_uuid": {
                    "type": "string",
                    "description": "The alert type these countermeasures apply on"
                },
                "name": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 100,
                    "description": "Name of the set of countermeasures"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "Detailed description of the countermeasures"
                },
                "start_on": {
                    "type": "string",
                    "default": "",
                    "maxLength": 100,
                    "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
                },
                "countermeasures": {
                    "type": "array",
                    "description": "Action steps of the countermeasure",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 100,
                                "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "Description of the action step"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "textual",
                                    "openc2",
                                    "powershell",
                                    "sh"
                                ],
                                "description": "Type of the action"
                            },
                            "value": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                            },
                            "object": {
                                "type": "object",
                                "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used"
                            },
                            "next_steps": {
                                "type": "array",
                                "description": "The set of named next action step(s) to execute after completion of this action step",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "name",
                            "type"
                        ]
                    }
                },
                "relevance": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Relevance of the countermeasure"
                },
                "duration": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Duration required to apply the countermeasure"
                },
                "community_uuid": {
                    "type": "string",
                    "description": "The community these countermeasures apply on"
                },
                "uuid": {
                    "type": "string",
                    "description": "The unique ressource ID"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the creation date of the ressource"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "the update date of the ressource"
                }
            },
            "required": [
                "countermeasures",
                "created_at",
                "name",
                "relevance",
                "updated_at",
                "uuid"
            ]
        },
        "CountermeasureListSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The unique ressource ID"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the creation date of the ressource"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "the update date of the ressource"
                            },
                            "entity_uuid": {
                                "type": "string",
                                "description": "The entity that these countermeasures apply on"
                            },
                            "rule_definition_uuid": {
                                "type": "string",
                                "description": "The rule these countermeasures apply on"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the set of countermeasures"
                            },
                            "description": {
                                "type": "string",
                                "description": "Detailed description of the countermeasures"
                            },
                            "start_on": {
                                "type": "string",
                                "default": "",
                                "description": "This optional property represents the named action step contained within action-steps list to begin processing on"
                            },
                            "countermeasures": {
                                "type": "array",
                                "description": "Action steps of the countermeasure",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 1,
                                            "maxLength": 100,
                                            "description": "A name for this action step that uniquely identifies it in the context of this course of action object. This is not a globally unique name"
                                        },
                                        "description": {
                                            "type": "string",
                                            "maxLength": 1000,
                                            "description": "Description of the action step"
                                        },
                                        "type": {
                                            "type": "string",
                                            "enum": [
                                                "textual",
                                                "openc2",
                                                "powershell",
                                                "sh"
                                            ],
                                            "description": "Type of the action"
                                        },
                                        "value": {
                                            "type": "string",
                                            "maxLength": 1000,
                                            "description": "The action step content in the case where the type requires a single string value.\n Example, for type=cisco:ios, a value might be, access-list 101 deny ip 10.0.1.0 0.0.0.255 10.0.1.0 0.0.0.255\n This property SHOULD NOT be used if object is used"
                                        },
                                        "object": {
                                            "type": "object",
                                            "description": "The action step content in the case where the type requires an object construct instead of a single string value. This property corresponds to an object representing  x, where x is the value specified for the type property.\nIf this property is used, type SHOULD be specified.\nThis property SHOULD NOT be used if value is used"
                                        },
                                        "next_steps": {
                                            "type": "array",
                                            "description": "The set of named next action step(s) to execute after completion of this action step",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "type"
                                    ]
                                }
                            },
                            "relevance": {
                                "type": "integer",
                                "description": "Relevance of the countermeasure"
                            },
                            "duration": {
                                "type": "string",
                                "description": "Duration required to apply the coountermeasure"
                            },
                            "alert_type_uuid": {
                                "type": "string",
                                "description": "The alert type uuid these countermeasures apply on"
                            },
                            "alert_type": {
                                "description": "alert type of the countermeasure",
                                "type": "object",
                                "properties": {
                                    "value": {
                                        "type": "string",
                                        "description": "name of the type"
                                    },
                                    "detail": {
                                        "type": "string",
                                        "description": "description of the type"
                                    }
                                }
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "Community the countermeasures belong to"
                            }
                        },
                        "required": [
                            "created_at",
                            "updated_at",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "IntakeSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "The identifier of the intake"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the intake"
                },
                "community_uuid": {
                    "type": "string",
                    "description": "The identifier of the community of the intake"
                },
                "entity_uuid": {
                    "type": "string",
                    "description": "The identifier of the entity of the intake",
                    "deprecated": true
                },
                "format_uuid": {
                    "type": "string",
                    "description": "The identifier of the format of the intake"
                },
                "intake_key": {
                    "type": "string",
                    "description": "The key to assocaited to the sent events"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of the intake"
                },
                "created_by": {
                    "type": "string",
                    "description": "The identifier of the client that created the intake"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The nature of the client that created the intake"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The modification date of the intake"
                },
                "updated_by": {
                    "type": "string",
                    "description": "The identifier of the client that updated the intake"
                },
                "updated_by_type": {
                    "type": "string",
                    "description": "The nature of the client that updated the intake"
                },
                "entity": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "minLength": 5,
                            "maxLength": 100,
                            "description": "The name of the entity"
                        },
                        "entity_id": {
                            "type": "string",
                            "description": "The Id of the entity"
                        },
                        "alerts_generation": {
                            "type": "string",
                            "description": "The uuid of the generation mode"
                        },
                        "description": {
                            "type": "string",
                            "maxLength": 1000,
                            "description": "The descrition of the entity"
                        },
                        "community_uuid": {
                            "type": "string"
                        },
                        "uuid": {
                            "type": "string"
                        },
                        "number_of_intakes": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "alerts_generation",
                        "community_uuid",
                        "entity_id",
                        "name",
                        "uuid"
                    ]
                },
                "configured": {
                    "type": "boolean",
                    "description": "Is a that intake configured via the intake settings API?"
                },
                "is_custom_format": {
                    "type": "boolean",
                    "description": "The intake's format is a custom format"
                },
                "connector_configuration_uuid": {
                    "type": "string",
                    "description": "The identifier of the intake's connector configuration in case it's a pulling intake"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the intake"
                }
            }
        },
        "IntakesSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of intakes matching the criteria",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The identifier of the intake"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the intake"
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "The identifier of the community of the intake"
                            },
                            "entity_uuid": {
                                "type": "string",
                                "description": "The identifier of the entity of the intake",
                                "deprecated": true
                            },
                            "format_uuid": {
                                "type": "string",
                                "description": "The identifier of the format of the intake"
                            },
                            "intake_key": {
                                "type": "string",
                                "description": "The key to assocaited to the sent events"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The creation date of the intake"
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The identifier of the client that created the intake"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The nature of the client that created the intake"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The modification date of the intake"
                            },
                            "updated_by": {
                                "type": "string",
                                "description": "The identifier of the client that updated the intake"
                            },
                            "updated_by_type": {
                                "type": "string",
                                "description": "The nature of the client that updated the intake"
                            },
                            "entity": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "minLength": 5,
                                        "maxLength": 100,
                                        "description": "The name of the entity"
                                    },
                                    "entity_id": {
                                        "type": "string",
                                        "description": "The Id of the entity"
                                    },
                                    "alerts_generation": {
                                        "type": "string",
                                        "description": "The uuid of the generation mode"
                                    },
                                    "description": {
                                        "type": "string",
                                        "maxLength": 1000,
                                        "description": "The descrition of the entity"
                                    },
                                    "community_uuid": {
                                        "type": "string"
                                    },
                                    "uuid": {
                                        "type": "string"
                                    },
                                    "number_of_intakes": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "alerts_generation",
                                    "community_uuid",
                                    "entity_id",
                                    "name",
                                    "uuid"
                                ]
                            },
                            "configured": {
                                "type": "boolean",
                                "description": "Is a that intake configured via the intake settings API?"
                            },
                            "is_custom_format": {
                                "type": "boolean",
                                "description": "The intake's format is a custom format"
                            },
                            "connector_configuration_uuid": {
                                "type": "string",
                                "description": "The identifier of the intake's connector configuration in case it's a pulling intake"
                            },
                            "status": {
                                "type": "string",
                                "description": "The status of the intake"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The number of intakes matching the criteria"
                }
            }
        },
        "IntakeSettingOffice365ConsentRedirectUri": {
            "type": "object",
            "properties": {
                "redirect_uri": {
                    "type": "string",
                    "description": "The redirect uri to use"
                },
                "tenant_id": {
                    "type": "string",
                    "description": "The tenant id of the user"
                }
            }
        },
        "ATTACKDatasourcesSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "List of MITRE ATT&CK datasources",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "Unique identifier of the datasource"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the datasource"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "Total number of datasources"
                }
            }
        },
        "ConfiguredIntakeFormatSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "List of configured intake formats uuids",
                    "items": {
                        "type": "object",
                        "properties": {
                            "format_uuid": {
                                "type": "string",
                                "description": "Unique identifier of the format"
                            },
                            "community_uuids": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "description": "Identifier of the community the format is used in"
                                }
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "Total number of configured intake formats"
                }
            }
        },
        "intake_optimization_rule_public_schema": {
            "required": [
                "action",
                "created_at",
                "created_by",
                "created_by_type",
                "uuid"
            ],
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "intake_uuid": {
                    "type": "string"
                },
                "format_uuid": {
                    "type": "string"
                },
                "community_uuid": {
                    "type": "string"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/optimization_rule_filter"
                    }
                },
                "action": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "default": true
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "created_by": {
                    "type": "string"
                },
                "created_by_type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "updated_by": {
                    "type": "string"
                },
                "updated_by_type": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "optimization_rule_filter": {
            "required": [
                "field",
                "operator"
            ],
            "properties": {
                "field": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "list_of_optimization_rules_schema": {
            "required": [
                "total"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/intake_optimization_rule_public_schema"
                    }
                },
                "total": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "list_of_optimization_actions_schema": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/optimization_action_description"
                    }
                }
            },
            "type": "object"
        },
        "optimization_action_description": {
            "required": [
                "action",
                "description",
                "name"
            ],
            "properties": {
                "action": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EventsSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of events",
                    "items": {
                        "type": "object"
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "An estimation of the number of events matching the criteria (by default, limited to the last 24 hours and up to 10000)"
                },
                "paging_token": {
                    "type": "string",
                    "description": "Token used to request next page of results"
                }
            }
        },
        "FieldsSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of fields in the current page",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the field"
                            },
                            "display_name": {
                                "type": "string",
                                "description": "Display name of the field"
                            },
                            "description": {
                                "type": "string",
                                "description": "Short description of the field"
                            },
                            "value_type": {
                                "type": "string",
                                "description": "Type of the field values"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The total number of fields"
                }
            }
        },
        "EventSearchSimilarListSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Similar event search terms",
                    "items": {
                        "type": "string"
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The number of similar event search terms"
                }
            }
        },
        "EventSearchJobInfoSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "Job identifier"
                },
                "status": {
                    "type": "integer",
                    "description": "Job status (0:not started, 1:in-progress, 2:done, 3:canceled)"
                },
                "total": {
                    "type": "integer",
                    "description": "An estimation of the number of events matching the criteria"
                },
                "retrieved": {
                    "type": "integer",
                    "description": "The number of events that are currently available"
                },
                "term": {
                    "type": "string",
                    "description": "Job event search terms"
                },
                "term_lang": {
                    "type": "string",
                    "description": "Language of the search terms"
                },
                "filters": {
                    "type": "array",
                    "description": "List of filters to apply",
                    "items": {
                        "type": "object",
                        "properties": {
                            "field": {
                                "type": "string",
                                "description": "Field to filter"
                            },
                            "value": {
                                "description": "Value that the field should have"
                            },
                            "operator": {
                                "type": "string",
                                "enum": [
                                    "=",
                                    "startswith",
                                    "endswith",
                                    "contains",
                                    "exists",
                                    ">",
                                    ">=",
                                    "<",
                                    "<="
                                ],
                                "description": "Filter operator"
                            },
                            "excluded": {
                                "type": "boolean",
                                "description": "Should matches be excluded ?"
                            },
                            "disabled": {
                                "type": "boolean",
                                "description": "Is this filter disabled ?"
                            }
                        },
                        "required": [
                            "field",
                            "operator"
                        ]
                    }
                },
                "created_by": {
                    "type": "string",
                    "description": "The profile that created the job"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The profile type that created the job"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of the search job"
                },
                "started_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date of the search job"
                },
                "canceled_by": {
                    "type": "string",
                    "description": "The profile that canceled the job"
                },
                "canceled_by_type": {
                    "type": "string",
                    "description": "The profile type that canceled the job"
                },
                "canceled_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The cancel date of the search job"
                },
                "ended_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date of the search job"
                },
                "earliest_time": {
                    "type": "string",
                    "description": "The earliest time of the time range of the search"
                },
                "latest_time": {
                    "type": "string",
                    "description": "The latest time of the time range of the search"
                },
                "results_ttl": {
                    "type": "integer",
                    "description": "The search results' time-to-live"
                },
                "expiration_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date at which the search job will expire"
                },
                "expired": {
                    "type": "boolean",
                    "description": "The event search job expiration status"
                },
                "short_histogram": {
                    "type": "array",
                    "description": "Short histogram",
                    "items": {
                        "type": "object",
                        "properties": {
                            "length": {
                                "type": "number",
                                "description": "Length of the bin in seconds"
                            },
                            "earliest_time": {
                                "type": "number",
                                "description": "Timestamp of the earliest event that can be stored in the bin"
                            },
                            "total": {
                                "type": "integer",
                                "description": "Number of events in the bin"
                            },
                            "alerts": {
                                "type": "integer",
                                "description": "Number of alert-related events in the bin"
                            },
                            "cases": {
                                "type": "integer",
                                "description": "Number of case-related events in the bin"
                            }
                        }
                    }
                },
                "view_uuid": {
                    "type": "string",
                    "description": "The identifier of the view of the job"
                },
                "community_uuids": {
                    "type": "array",
                    "description": "Communities impacted by the search",
                    "items": {
                        "type": "string"
                    }
                },
                "only_eternal": {
                    "type": "boolean",
                    "description": "Only search in eternal events"
                },
                "max_last_events": {
                    "type": "integer",
                    "description": "The optional maximum number of events the job returns"
                },
                "date_field": {
                    "type": "string",
                    "description": "Optional name of field used for the event's date boundaries, @timestamp is used by default"
                }
            }
        },
        "EventSearchJobListSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of event search jobs",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "Job identifier"
                            },
                            "status": {
                                "type": "integer",
                                "description": "Job status (0:not started, 1:in-progress, 2:done, 3:canceled)"
                            },
                            "total": {
                                "type": "integer",
                                "description": "An estimation of the number of events matching the criteria"
                            },
                            "retrieved": {
                                "type": "integer",
                                "description": "The number of events that are currently available"
                            },
                            "term": {
                                "type": "string",
                                "description": "Job event search terms"
                            },
                            "term_lang": {
                                "type": "string",
                                "description": "Language of the search terms"
                            },
                            "filters": {
                                "type": "array",
                                "description": "List of filters to apply",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "field": {
                                            "type": "string",
                                            "description": "Field to filter"
                                        },
                                        "value": {
                                            "description": "Value that the field should have"
                                        },
                                        "operator": {
                                            "type": "string",
                                            "enum": [
                                                "=",
                                                "startswith",
                                                "endswith",
                                                "contains",
                                                "exists",
                                                ">",
                                                ">=",
                                                "<",
                                                "<="
                                            ],
                                            "description": "Filter operator"
                                        },
                                        "excluded": {
                                            "type": "boolean",
                                            "description": "Should matches be excluded ?"
                                        },
                                        "disabled": {
                                            "type": "boolean",
                                            "description": "Is this filter disabled ?"
                                        }
                                    },
                                    "required": [
                                        "field",
                                        "operator"
                                    ]
                                }
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The profile that created the job"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The profile type that created the job"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The creation date of the search job"
                            },
                            "started_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The start date of the search job"
                            },
                            "canceled_by": {
                                "type": "string",
                                "description": "The profile that canceled the job"
                            },
                            "canceled_by_type": {
                                "type": "string",
                                "description": "The profile type that canceled the job"
                            },
                            "canceled_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The cancel date of the search job"
                            },
                            "ended_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The end date of the search job"
                            },
                            "earliest_time": {
                                "type": "string",
                                "description": "The earliest time of the time range of the search"
                            },
                            "latest_time": {
                                "type": "string",
                                "description": "The latest time of the time range of the search"
                            },
                            "results_ttl": {
                                "type": "integer",
                                "description": "The search results' time-to-live"
                            },
                            "expiration_date": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The date at which the search job will expire"
                            },
                            "expired": {
                                "type": "boolean",
                                "description": "The event search job expiration status"
                            },
                            "short_histogram": {
                                "type": "array",
                                "description": "Short histogram",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "length": {
                                            "type": "number",
                                            "description": "Length of the bin in seconds"
                                        },
                                        "earliest_time": {
                                            "type": "number",
                                            "description": "Timestamp of the earliest event that can be stored in the bin"
                                        },
                                        "total": {
                                            "type": "integer",
                                            "description": "Number of events in the bin"
                                        },
                                        "alerts": {
                                            "type": "integer",
                                            "description": "Number of alert-related events in the bin"
                                        },
                                        "cases": {
                                            "type": "integer",
                                            "description": "Number of case-related events in the bin"
                                        }
                                    }
                                }
                            },
                            "view_uuid": {
                                "type": "string",
                                "description": "The identifier of the view of the job"
                            },
                            "community_uuids": {
                                "type": "array",
                                "description": "Communities impacted by the search",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "only_eternal": {
                                "type": "boolean",
                                "description": "Only search in eternal events"
                            },
                            "max_last_events": {
                                "type": "integer",
                                "description": "The optional maximum number of events the job returns"
                            },
                            "date_field": {
                                "type": "string",
                                "description": "Optional name of field used for the event's date boundaries, @timestamp is used by default"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The number of event search jobs matching the criteria"
                }
            }
        },
        "HistogramsSchema": {
            "type": "object",
            "properties": {
                "short": {
                    "type": "array",
                    "description": "Short histogram",
                    "items": {
                        "type": "object",
                        "properties": {
                            "length": {
                                "type": "number",
                                "description": "Length of the bin in seconds"
                            },
                            "earliest_time": {
                                "type": "number",
                                "description": "Timestamp of the earliest event that can be stored in the bin"
                            },
                            "total": {
                                "type": "integer",
                                "description": "Number of events in the bin"
                            },
                            "alerts": {
                                "type": "integer",
                                "description": "Number of alert-related events in the bin"
                            },
                            "cases": {
                                "type": "integer",
                                "description": "Number of case-related events in the bin"
                            }
                        }
                    }
                },
                "large": {
                    "type": "array",
                    "description": "Large histogram",
                    "items": {
                        "type": "object",
                        "properties": {
                            "length": {
                                "type": "number",
                                "description": "Length of the bin in seconds"
                            },
                            "earliest_time": {
                                "type": "number",
                                "description": "Timestamp of the earliest event that can be stored in the bin"
                            },
                            "total": {
                                "type": "integer",
                                "description": "Number of events in the bin"
                            },
                            "alerts": {
                                "type": "integer",
                                "description": "Number of alert-related events in the bin"
                            },
                            "cases": {
                                "type": "integer",
                                "description": "Number of case-related events in the bin"
                            }
                        }
                    }
                }
            }
        },
        "EventSearchJobFieldsSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of fields found in the event search results",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the field"
                            },
                            "display_name": {
                                "type": "string",
                                "description": "Display name of the field"
                            },
                            "description": {
                                "type": "string",
                                "description": "Short description of the field"
                            },
                            "value_type": {
                                "type": "string",
                                "description": "Type of the field values"
                            },
                            "most_common_values": {
                                "type": "array",
                                "description": "The most common values",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Value of the field"
                                        },
                                        "value": {
                                            "type": "number",
                                            "description": "Percent of occurence"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The total number of fields"
                },
                "retrieved": {
                    "type": "integer",
                    "description": "The number of events over which fields were computed"
                }
            }
        },
        "RulesCountersSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "The total number of rules"
                },
                "verified": {
                    "type": "integer",
                    "description": "The total number of verified rules"
                },
                "enabled": {
                    "type": "integer",
                    "description": "The total number of enabled rules"
                },
                "per_effort": {
                    "type": "object",
                    "description": "Statistics per effort"
                }
            },
            "required": [
                "enabled",
                "per_effort",
                "total",
                "verified"
            ]
        },
        "IndicatorCounterSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "description": "The total number of indicator covered by community's enabled CTI rules"
                }
            },
            "required": [
                "total"
            ]
        },
        "ArchiveSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "The identifier of the archive"
                },
                "short_id": {
                    "type": "string",
                    "description": "The short identifier of the archive"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the archive"
                },
                "community_uuid": {
                    "type": "string",
                    "description": "The identifier of the community of the archive"
                },
                "provider": {
                    "type": "string",
                    "description": "The provider to use to store snapshots"
                },
                "nb_snapshots": {
                    "type": "string",
                    "description": "The number of snapshots contained by the archive"
                },
                "settings": {
                    "type": "object"
                },
                "status_uuid": {
                    "type": "string",
                    "description": "The identifier of the status of the archive"
                },
                "status_reason": {
                    "type": "string",
                    "description": "The reason of the status of the archive"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of the archive"
                },
                "created_by": {
                    "type": "string",
                    "description": "The identifier of the client which create the archive"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The type of the client which create the archive"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The modification date of the archive"
                },
                "updated_by": {
                    "type": "string",
                    "description": "The identifier of the client which update the archive"
                },
                "updated_by_type": {
                    "type": "string",
                    "description": "The type of the client which update the archive"
                },
                "is_encrypted": {
                    "type": "boolean",
                    "description": "Is the archive encrypted"
                }
            }
        },
        "ArchivesSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of archives matching the criteria",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The identifier of the archive"
                            },
                            "short_id": {
                                "type": "string",
                                "description": "The short identifier of the archive"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the archive"
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "The identifier of the community of the archive"
                            },
                            "provider": {
                                "type": "string",
                                "description": "The provider to use to store snapshots"
                            },
                            "nb_snapshots": {
                                "type": "string",
                                "description": "The number of snapshots contained by the archive"
                            },
                            "settings": {
                                "description": "The settings to generate and store snapshots"
                            },
                            "status_uuid": {
                                "type": "string",
                                "description": "The identifier of the status of the archive"
                            },
                            "status_reason": {
                                "type": "string",
                                "description": "The reason of the status of the archive"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The creation date of the archive"
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The identifier of the client which create the archive"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The type of the client which create the archive"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The modification date of the archive"
                            },
                            "updated_by": {
                                "type": "string",
                                "description": "The identifier of the client which update the archive"
                            },
                            "updated_by_type": {
                                "type": "string",
                                "description": "The type of the client which update the archive"
                            },
                            "is_encrypted": {
                                "type": "boolean",
                                "description": "Is the archive encrypted"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The number of archives matching the criteria"
                }
            }
        },
        "SnapshotsSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of snapshots matching the criteria",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The identifier of the snapshot"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the snapshot"
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "The identifier of the community of the snapshot"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The creation date of the snapshot"
                            },
                            "starts_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The first date (included) covered by the snapshot"
                            },
                            "ends_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The last date (excluded) covered by the snapshot"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The number of snapshots matching the criteria"
                }
            }
        },
        "SnapshotSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "The identifier of the snapshot"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the snapshot"
                },
                "community_uuid": {
                    "type": "string",
                    "description": "The identifier of the community of the snapshot"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of the snapshot"
                },
                "starts_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The first date (included) covered by the snapshot"
                },
                "ends_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last date (excluded) covered by the snapshot"
                }
            }
        },
        "ViewSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "The identifier of the view"
                },
                "short_id": {
                    "type": "string",
                    "description": "The short identifier of the view"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the view"
                },
                "date_start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date for events retrieved from archive"
                },
                "date_end": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date for events retrieved from archive"
                },
                "archive": {
                    "type": "object",
                    "properties": {
                        "uuid": {
                            "type": "string",
                            "description": "The identifier of the archive"
                        },
                        "short_id": {
                            "type": "string",
                            "description": "The short identifier of the archive"
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the archive"
                        },
                        "community_uuid": {
                            "type": "string",
                            "description": "The identifier of the community of the archive"
                        },
                        "provider": {
                            "type": "string",
                            "description": "The provider to use to store snapshots"
                        },
                        "nb_snapshots": {
                            "type": "string",
                            "description": "The number of snapshots contained by the archive"
                        },
                        "settings": {
                            "description": "The settings to generate and store snapshots"
                        },
                        "status_uuid": {
                            "type": "string",
                            "description": "The identifier of the status of the archive"
                        },
                        "status_reason": {
                            "type": "string",
                            "description": "The reason of the status of the archive"
                        },
                        "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The creation date of the archive"
                        },
                        "created_by": {
                            "type": "string",
                            "description": "The identifier of the client which create the archive"
                        },
                        "created_by_type": {
                            "type": "string",
                            "description": "The type of the client which create the archive"
                        },
                        "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The modification date of the archive"
                        },
                        "updated_by": {
                            "type": "string",
                            "description": "The identifier of the client which update the archive"
                        },
                        "updated_by_type": {
                            "type": "string",
                            "description": "The type of the client which update the archive"
                        },
                        "is_encrypted": {
                            "type": "boolean",
                            "description": "Is the archive encrypted"
                        }
                    }
                },
                "community_uuid": {
                    "type": "string",
                    "description": "The identifier of the community of the view"
                },
                "nb_events": {
                    "type": "string",
                    "description": "The number of snapshots contained by the view"
                },
                "total_segments": {
                    "type": "integer",
                    "description": "The total number of segments inside the view"
                },
                "processed_segments": {
                    "type": "integer",
                    "description": "The number of segments that were already indexed"
                },
                "errors": {
                    "type": "array",
                    "description": "List of errors that occured while processing the view",
                    "items": {
                        "type": "object"
                    }
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The creation date of the view"
                },
                "created_by": {
                    "type": "string",
                    "description": "The identifier of the client which create the view"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The type of the client which create the view"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The modification date of the view"
                },
                "updated_by": {
                    "type": "string",
                    "description": "The identifier of the client which update the view"
                },
                "updated_by_type": {
                    "type": "string",
                    "description": "The type of the client which update the view"
                }
            }
        },
        "ViewsSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "The list of views matching the criteria",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The identifier of the view"
                            },
                            "short_id": {
                                "type": "string",
                                "description": "The short identifier of the view"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the view"
                            },
                            "date_start": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The start date for events retrieved from archive"
                            },
                            "date_end": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The end date for events retrieved from archive"
                            },
                            "archive": {
                                "type": "object",
                                "properties": {
                                    "uuid": {
                                        "type": "string",
                                        "description": "The identifier of the archive"
                                    },
                                    "short_id": {
                                        "type": "string",
                                        "description": "The short identifier of the archive"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the archive"
                                    },
                                    "community_uuid": {
                                        "type": "string",
                                        "description": "The identifier of the community of the archive"
                                    },
                                    "provider": {
                                        "type": "string",
                                        "description": "The provider to use to store snapshots"
                                    },
                                    "nb_snapshots": {
                                        "type": "string",
                                        "description": "The number of snapshots contained by the archive"
                                    },
                                    "settings": {
                                        "description": "The settings to generate and store snapshots"
                                    },
                                    "status_uuid": {
                                        "type": "string",
                                        "description": "The identifier of the status of the archive"
                                    },
                                    "status_reason": {
                                        "type": "string",
                                        "description": "The reason of the status of the archive"
                                    },
                                    "created_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The creation date of the archive"
                                    },
                                    "created_by": {
                                        "type": "string",
                                        "description": "The identifier of the client which create the archive"
                                    },
                                    "created_by_type": {
                                        "type": "string",
                                        "description": "The type of the client which create the archive"
                                    },
                                    "updated_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "The modification date of the archive"
                                    },
                                    "updated_by": {
                                        "type": "string",
                                        "description": "The identifier of the client which update the archive"
                                    },
                                    "updated_by_type": {
                                        "type": "string",
                                        "description": "The type of the client which update the archive"
                                    },
                                    "is_encrypted": {
                                        "type": "boolean",
                                        "description": "Is the archive encrypted"
                                    }
                                }
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "The identifier of the community of the view"
                            },
                            "nb_events": {
                                "type": "string",
                                "description": "The number of snapshots contained by the view"
                            },
                            "total_segments": {
                                "type": "integer",
                                "description": "The total number of segments inside the view"
                            },
                            "processed_segments": {
                                "type": "integer",
                                "description": "The number of segments that were already indexed"
                            },
                            "errors": {
                                "type": "array",
                                "description": "List of errors that occured while processing the view",
                                "items": {
                                    "type": "object"
                                }
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The creation date of the view"
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The identifier of the client which create the view"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The type of the client which create the view"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The modification date of the view"
                            },
                            "updated_by": {
                                "type": "string",
                                "description": "The identifier of the client which update the view"
                            },
                            "updated_by_type": {
                                "type": "string",
                                "description": "The type of the client which update the view"
                            }
                        }
                    }
                },
                "total": {
                    "type": "integer",
                    "description": "The number of views matching the criteria"
                }
            }
        },
        "RuleTagsSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the tag"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the tag"
                            }
                        },
                        "required": [
                            "name",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "MergedRuleSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "the identifier of the rule"
                },
                "enabled": {
                    "type": "boolean",
                    "x-nullable": true,
                    "description": "Is the rule enabled?"
                },
                "community_uuid": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The community uuid if the rule is attached to one"
                },
                "parameters": {
                    "type": "array",
                    "description": "The parameters of the rule",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the parameter"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the parameter"
                            },
                            "value": {
                                "type": "string",
                                "description": "The value of the parameter"
                            },
                            "default": {
                                "type": "string",
                                "description": "The default value of the parameter"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "the description of the parameter"
                            }
                        },
                        "required": [
                            "default",
                            "description",
                            "name",
                            "uuid",
                            "value"
                        ]
                    }
                },
                "all_entities": {
                    "type": "boolean",
                    "x-nullable": true,
                    "description": "Should the rule be applied on all entities?"
                },
                "entities": {
                    "type": "array",
                    "description": "The list of entities the rule should be applied on",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the entity"
                            },
                            "entity_id": {
                                "type": "string",
                                "description": "The Id of the entity"
                            },
                            "alerts_generation": {
                                "type": "string",
                                "description": "The uuid of the generation mode"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "The descrition of the entity"
                            },
                            "community_uuid": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            },
                            "number_of_intakes": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "alerts_generation",
                            "community_uuid",
                            "entity_id",
                            "name",
                            "uuid"
                        ]
                    }
                },
                "all_assets": {
                    "type": "boolean",
                    "x-nullable": true,
                    "description": "Should the rule be applied on all assets?"
                },
                "assets": {
                    "type": "array",
                    "description": "The list of assets identifiers the rule should be applied on",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "last_compilation_success": {
                    "type": "boolean",
                    "x-nullable": true,
                    "description": "Is the last compilation succeed?"
                },
                "last_compilation_message": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The message of the last compilation"
                },
                "last_compilation_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The last compilation date of the rule"
                },
                "exclude_assets": {
                    "type": "boolean",
                    "description": "Are the listed assets excluded or included"
                },
                "exclude_entities": {
                    "type": "boolean",
                    "description": "Are the listed entities excluded or included"
                },
                "name": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 100,
                    "description": "The name of the rule"
                },
                "type": {
                    "description": "The type of the rule"
                },
                "private": {
                    "type": "boolean",
                    "description": "Is the rule available only for the community?"
                },
                "is_private": {
                    "type": "boolean",
                    "description": "Is the rule available only for the community?"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "The descrition of the rule"
                },
                "payload": {
                    "type": "string",
                    "description": "The payload of the rule"
                },
                "severity": {
                    "type": "integer",
                    "description": "The severity of the rule"
                },
                "effort": {
                    "type": "integer",
                    "description": "The effort of the rule"
                },
                "alert_type": {
                    "description": "The alert type associated to the rule",
                    "type": "object",
                    "properties": {
                        "uuid": {
                            "type": "string",
                            "description": "Alert type uuid"
                        },
                        "category_uuid": {
                            "type": "string",
                            "description": "Alert type category uuid"
                        },
                        "category_name": {
                            "type": "string",
                            "description": "Alert type category name"
                        },
                        "value": {
                            "type": "string",
                            "description": "Alert type name "
                        },
                        "detail": {
                            "type": "string",
                            "description": "Alert type detail"
                        },
                        "description": {
                            "type": "string",
                            "description": "Alert type description"
                        }
                    },
                    "required": [
                        "category_name",
                        "category_uuid",
                        "uuid",
                        "value"
                    ]
                },
                "alert_category": {
                    "description": "The alert category associated to the rule",
                    "type": "object",
                    "properties": {
                        "uuid": {
                            "type": "string",
                            "description": "Alert category uuid"
                        },
                        "name": {
                            "type": "string",
                            "minLength": 5,
                            "maxLength": 100,
                            "description": "Alert category name"
                        }
                    },
                    "required": [
                        "name",
                        "uuid"
                    ]
                },
                "tags": {
                    "type": "array",
                    "description": "The list of tags associated to the rule",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the tag"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the tag"
                            }
                        },
                        "required": [
                            "name",
                            "uuid"
                        ]
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The source of the rule"
                },
                "verified": {
                    "type": "boolean",
                    "description": "Is the rule verified?"
                },
                "related_object_refs": {
                    "type": "array",
                    "description": "The list of reference of objects related to the rule",
                    "items": {
                        "type": "string"
                    }
                },
                "datasources": {
                    "type": "array",
                    "description": "The list of datasources of the rule",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "Unique identifier of the datasource"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the datasource"
                            }
                        }
                    }
                },
                "event_fields": {
                    "type": "array",
                    "description": "The list of fields to show when displaying a matched event",
                    "items": {
                        "type": "object",
                        "properties": {
                            "field": {
                                "type": "string",
                                "description": "Field path"
                            },
                            "description": {
                                "type": "string",
                                "description": "Field description"
                            }
                        },
                        "required": [
                            "description",
                            "field"
                        ]
                    }
                },
                "similarity_strategy": {
                    "type": "array",
                    "description": "Similarity Strategy used by this rule",
                    "items": {}
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The creation date of the rule"
                },
                "created_by": {
                    "type": "string",
                    "description": "The profile who created the rule"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The profile type who created the rule can be 'avatar', 'application', 'apikey'"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The modification date of the rule"
                },
                "updated_by": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The profile who updated the rule"
                },
                "updated_by_type": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The profile type who updated the rule can be 'rule', 'application', 'apikey'"
                },
                "goal": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "A high-level description explaining the contribution of the rule"
                },
                "false_positives": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "A possible legitimate usage which can raise a false alert"
                },
                "references": {
                    "type": "string",
                    "description": "Details on what led to write this rule"
                },
                "available_for_subcommunities": {
                    "type": "boolean",
                    "default": false,
                    "x-nullable": true,
                    "description": "Is the rule available for subcommunities (if applicable)"
                },
                "instance_uuid": {
                    "type": "string",
                    "format": "uuid",
                    "x-nullable": true,
                    "description": "the identifier of the instance of the rule"
                }
            },
            "required": [
                "alert_category",
                "alert_type",
                "all_assets",
                "all_entities",
                "created_at",
                "created_by",
                "created_by_type",
                "datasources",
                "effort",
                "enabled",
                "event_fields",
                "instance_uuid",
                "last_compilation_at",
                "last_compilation_message",
                "last_compilation_success",
                "name",
                "parameters",
                "related_object_refs",
                "severity",
                "source",
                "type",
                "updated_at",
                "uuid",
                "verified"
            ]
        },
        "MergedRulesSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the rule"
                            },
                            "enabled": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Is the rule enabled?"
                            },
                            "community_uuid": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The community uuid if the rule is attached to one"
                            },
                            "parameters": {
                                "type": "array",
                                "description": "The parameters of the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "the identifier of the parameter"
                                        },
                                        "name": {
                                            "type": "string",
                                            "minLength": 5,
                                            "maxLength": 100,
                                            "description": "The name of the parameter"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "The value of the parameter"
                                        },
                                        "default": {
                                            "type": "string",
                                            "description": "The default value of the parameter"
                                        },
                                        "description": {
                                            "type": "string",
                                            "maxLength": 1000,
                                            "description": "the description of the parameter"
                                        }
                                    },
                                    "required": [
                                        "default",
                                        "description",
                                        "name",
                                        "uuid",
                                        "value"
                                    ]
                                }
                            },
                            "all_entities": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Should the rule be applied on all entities?"
                            },
                            "entities": {
                                "type": "array",
                                "description": "The list of entities the rule should be applied on",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 5,
                                            "maxLength": 100,
                                            "description": "The name of the entity"
                                        },
                                        "entity_id": {
                                            "type": "string",
                                            "description": "The Id of the entity"
                                        },
                                        "alerts_generation": {
                                            "type": "string",
                                            "description": "The uuid of the generation mode"
                                        },
                                        "description": {
                                            "type": "string",
                                            "maxLength": 1000,
                                            "description": "The descrition of the entity"
                                        },
                                        "community_uuid": {
                                            "type": "string"
                                        },
                                        "uuid": {
                                            "type": "string"
                                        },
                                        "number_of_intakes": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "alerts_generation",
                                        "community_uuid",
                                        "entity_id",
                                        "name",
                                        "uuid"
                                    ]
                                }
                            },
                            "all_assets": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Should the rule be applied on all assets?"
                            },
                            "assets": {
                                "type": "array",
                                "description": "The list of assets identifiers the rule should be applied on",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            },
                            "last_compilation_success": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Is the last compilation succeed?"
                            },
                            "last_compilation_message": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The message of the last compilation"
                            },
                            "last_compilation_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The last compilation date of the rule"
                            },
                            "exclude_assets": {
                                "type": "boolean",
                                "description": "Are the listed assets excluded or included"
                            },
                            "exclude_entities": {
                                "type": "boolean",
                                "description": "Are the listed entities excluded or included"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the rule"
                            },
                            "type": {
                                "description": "The type of the rule"
                            },
                            "private": {
                                "type": "boolean",
                                "description": "Is the rule available only for the community?"
                            },
                            "is_private": {
                                "type": "boolean",
                                "description": "Is the rule available only for the community?"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "The descrition of the rule"
                            },
                            "payload": {
                                "type": "string",
                                "description": "The payload of the rule"
                            },
                            "severity": {
                                "type": "integer",
                                "description": "The severity of the rule"
                            },
                            "effort": {
                                "type": "integer",
                                "description": "The effort of the rule"
                            },
                            "alert_type": {
                                "description": "The alert type associated to the rule",
                                "type": "object",
                                "properties": {
                                    "uuid": {
                                        "type": "string",
                                        "description": "Alert type uuid"
                                    },
                                    "category_uuid": {
                                        "type": "string",
                                        "description": "Alert type category uuid"
                                    },
                                    "category_name": {
                                        "type": "string",
                                        "description": "Alert type category name"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Alert type name "
                                    },
                                    "detail": {
                                        "type": "string",
                                        "description": "Alert type detail"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Alert type description"
                                    }
                                },
                                "required": [
                                    "category_name",
                                    "category_uuid",
                                    "uuid",
                                    "value"
                                ]
                            },
                            "alert_category": {
                                "description": "The alert category associated to the rule",
                                "type": "object",
                                "properties": {
                                    "uuid": {
                                        "type": "string",
                                        "description": "Alert category uuid"
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 5,
                                        "maxLength": 100,
                                        "description": "Alert category name"
                                    }
                                },
                                "required": [
                                    "name",
                                    "uuid"
                                ]
                            },
                            "tags": {
                                "type": "array",
                                "description": "The list of tags associated to the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "the identifier of the tag"
                                        },
                                        "name": {
                                            "type": "string",
                                            "minLength": 5,
                                            "maxLength": 100,
                                            "description": "The name of the tag"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "uuid"
                                    ]
                                }
                            },
                            "source": {
                                "type": "string",
                                "description": "The source of the rule"
                            },
                            "verified": {
                                "type": "boolean",
                                "description": "Is the rule verified?"
                            },
                            "related_object_refs": {
                                "type": "array",
                                "description": "The list of reference of objects related to the rule",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "datasources": {
                                "type": "array",
                                "description": "The list of datasources of the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "description": "Unique identifier of the datasource"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the datasource"
                                        }
                                    }
                                }
                            },
                            "event_fields": {
                                "type": "array",
                                "description": "The list of fields to show when displaying a matched event",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "field": {
                                            "type": "string",
                                            "description": "Field path"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "Field description"
                                        }
                                    },
                                    "required": [
                                        "description",
                                        "field"
                                    ]
                                }
                            },
                            "similarity_strategy": {
                                "type": "array",
                                "description": "Similarity Strategy used by this rule",
                                "items": {}
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The creation date of the rule"
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The profile who created the rule"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The profile type who created the rule can be 'avatar', 'application', 'apikey'"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The modification date of the rule"
                            },
                            "updated_by": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The profile who updated the rule"
                            },
                            "updated_by_type": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The profile type who updated the rule can be 'rule', 'application', 'apikey'"
                            },
                            "goal": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "A high-level description explaining the contribution of the rule"
                            },
                            "false_positives": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "A possible legitimate usage which can raise a false alert"
                            },
                            "references": {
                                "type": "string",
                                "description": "Details on what led to write this rule"
                            },
                            "available_for_subcommunities": {
                                "type": "boolean",
                                "default": false,
                                "x-nullable": true,
                                "description": "Is the rule available for subcommunities (if applicable)"
                            },
                            "instance_uuid": {
                                "type": "string",
                                "format": "uuid",
                                "x-nullable": true,
                                "description": "the identifier of the instance of the rule"
                            }
                        },
                        "required": [
                            "alert_category",
                            "alert_type",
                            "all_assets",
                            "all_entities",
                            "created_at",
                            "created_by",
                            "created_by_type",
                            "datasources",
                            "effort",
                            "enabled",
                            "event_fields",
                            "instance_uuid",
                            "last_compilation_at",
                            "last_compilation_message",
                            "last_compilation_success",
                            "name",
                            "parameters",
                            "related_object_refs",
                            "severity",
                            "source",
                            "type",
                            "updated_at",
                            "uuid",
                            "verified"
                        ]
                    }
                }
            }
        },
        "AlertFilterSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "The unique ressource ID"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert filter"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the alert filter"
                },
                "exclusion_pattern": {
                    "type": "string",
                    "description": "The STIX observation expression that models the exclusion pattern"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The creation date of the alert filter"
                },
                "created_by": {
                    "type": "string",
                    "description": "The profile who created the alert filter"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                },
                "expires_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The expiration date of the alert filter"
                },
                "status": {
                    "description": "Status of the Alert Filter (active or expired)"
                }
            },
            "required": [
                "created_at",
                "created_by",
                "created_by_type",
                "exclusion_pattern",
                "name",
                "status",
                "uuid"
            ]
        },
        "AlertFiltersSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The unique ressource ID"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the alert filter"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the alert filter"
                            },
                            "exclusion_pattern": {
                                "type": "string",
                                "description": "The STIX observation expression that models the exclusion pattern"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The creation date of the alert filter"
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The profile who created the alert filter"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The expiration date of the alert filter"
                            },
                            "status": {
                                "description": "Status of the Alert Filter (active or expired)"
                            }
                        },
                        "required": [
                            "created_at",
                            "created_by",
                            "created_by_type",
                            "exclusion_pattern",
                            "name",
                            "status",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "MatrixSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the rule"
                            },
                            "enabled": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Is the rule enabled?"
                            },
                            "related_object_refs": {
                                "type": "array",
                                "description": "The list of reference of objects related to the rule",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "datasources": {
                                "type": "array",
                                "description": "The list of datasources of the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "description": "Unique identifier of the datasource"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the datasource"
                                        }
                                    }
                                }
                            }
                        },
                        "required": [
                            "datasources",
                            "enabled",
                            "related_object_refs",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "MatrixAttackNavigatorSchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "object",
                    "properties": {
                        "attack": {
                            "type": "string"
                        },
                        "layer": {
                            "type": "string"
                        },
                        "navigator": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "attack",
                        "layer",
                        "navigator"
                    ]
                },
                "domain": {
                    "type": "string"
                },
                "techniques": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "techniqueID": {
                                "type": "string",
                                "description": "MITRE ID of the techniques"
                            },
                            "comment": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "comment",
                            "techniqueID"
                        ]
                    }
                }
            },
            "required": [
                "domain",
                "name"
            ]
        },
        "RuleSettingSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "The unique ressource ID"
                },
                "effort_threshold_for_auto_activation": {
                    "type": "integer",
                    "description": "The effort threshold to enable automatically new rules from catalog"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The creation date of the setting"
                },
                "created_by": {
                    "type": "string",
                    "description": "The profile who created the setting"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The profile type who created the setting can be 'avatar', 'application', 'apikey'"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The modification date of the setting"
                },
                "updated_by": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The profile who updated the setting"
                },
                "updated_by_type": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The profile type who updated the setting can be 'rule', 'application', 'apikey'"
                },
                "community_uuid": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The community the setting belongs to"
                }
            },
            "required": [
                "created_at",
                "created_by",
                "created_by_type",
                "effort_threshold_for_auto_activation",
                "updated_at",
                "uuid"
            ]
        },
        "RuleFormatsAssociationSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "intake_format_uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the intake format"
                            },
                            "intake_format_name": {
                                "type": "string",
                                "description": "the name of the intake format"
                            },
                            "community_uuid": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "the community uuid of the association row"
                            },
                            "configured": {
                                "type": "boolean",
                                "description": "True if the community has an intake using the intake format"
                            },
                            "intakes_community_uuids": {
                                "type": "array",
                                "x-nullable": true,
                                "description": "The list of community uuids where the compatible format is used in an intake",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "community_uuid",
                            "configured",
                            "intake_format_name",
                            "intake_format_uuid",
                            "intakes_community_uuids"
                        ]
                    }
                }
            }
        },
        "compilation_reports_list": {
            "required": [
                "total"
            ],
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/compilation_report"
                    }
                }
            },
            "type": "object"
        },
        "compilation_report": {
            "required": [
                "compilation_date",
                "rule_definition_uuid",
                "uuid"
            ],
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "rule_definition_uuid": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "default": "in_progress"
                },
                "reason": {
                    "type": "string"
                },
                "compilation_date": {
                    "type": "string",
                    "format": "date-time"
                },
                "last_indicator_updated_at": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "daily_c_t_i_schema": {
            "required": [
                "compiled_indicators",
                "failed_indicators"
            ],
            "properties": {
                "compiled_indicators": {
                    "type": "integer"
                },
                "failed_indicators": {
                    "type": "integer"
                },
                "not_compilable_indicators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/c_t_i_failures"
                    }
                }
            },
            "type": "object"
        },
        "c_t_i_failures": {
            "required": [
                "id",
                "pattern",
                "reason"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MultiTenantRuleSchema": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string",
                    "format": "uuid",
                    "description": "the identifier of the rule"
                },
                "enabled": {
                    "type": "boolean",
                    "x-nullable": true,
                    "description": "Is the rule enabled?"
                },
                "name": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 100,
                    "description": "The name of the rule"
                },
                "type": {
                    "description": "The type of the rule"
                },
                "private": {
                    "type": "boolean",
                    "description": "Is the rule available only for the community?"
                },
                "is_private": {
                    "type": "boolean",
                    "description": "Is the rule available only for the community?"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "The descrition of the rule"
                },
                "payload": {
                    "type": "string",
                    "description": "The payload of the rule"
                },
                "severity": {
                    "type": "integer",
                    "description": "The severity of the rule"
                },
                "effort": {
                    "type": "integer",
                    "description": "The effort of the rule"
                },
                "alert_type": {
                    "description": "The alert type associated to the rule",
                    "type": "object",
                    "properties": {
                        "uuid": {
                            "type": "string",
                            "description": "Alert type uuid"
                        },
                        "category_uuid": {
                            "type": "string",
                            "description": "Alert type category uuid"
                        },
                        "category_name": {
                            "type": "string",
                            "description": "Alert type category name"
                        },
                        "value": {
                            "type": "string",
                            "description": "Alert type name "
                        },
                        "detail": {
                            "type": "string",
                            "description": "Alert type detail"
                        },
                        "description": {
                            "type": "string",
                            "description": "Alert type description"
                        }
                    },
                    "required": [
                        "category_name",
                        "category_uuid",
                        "uuid",
                        "value"
                    ]
                },
                "alert_category": {
                    "description": "The alert category associated to the rule",
                    "type": "object",
                    "properties": {
                        "uuid": {
                            "type": "string",
                            "description": "Alert category uuid"
                        },
                        "name": {
                            "type": "string",
                            "minLength": 5,
                            "maxLength": 100,
                            "description": "Alert category name"
                        }
                    },
                    "required": [
                        "name",
                        "uuid"
                    ]
                },
                "tags": {
                    "type": "array",
                    "description": "The list of tags associated to the rule",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the tag"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the tag"
                            }
                        },
                        "required": [
                            "name",
                            "uuid"
                        ]
                    }
                },
                "source": {
                    "type": "string",
                    "description": "The source of the rule"
                },
                "verified": {
                    "type": "boolean",
                    "description": "Is the rule verified?"
                },
                "related_object_refs": {
                    "type": "array",
                    "description": "The list of reference of objects related to the rule",
                    "items": {
                        "type": "string"
                    }
                },
                "datasources": {
                    "type": "array",
                    "description": "The list of datasources of the rule",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "Unique identifier of the datasource"
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the datasource"
                            }
                        }
                    }
                },
                "event_fields": {
                    "type": "array",
                    "description": "The list of fields to show when displaying a matched event",
                    "items": {
                        "type": "object",
                        "properties": {
                            "field": {
                                "type": "string",
                                "description": "Field path"
                            },
                            "description": {
                                "type": "string",
                                "description": "Field description"
                            }
                        },
                        "required": [
                            "description",
                            "field"
                        ]
                    }
                },
                "similarity_strategy": {
                    "type": "array",
                    "description": "Similarity Strategy used by this rule",
                    "items": {}
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The creation date of the rule"
                },
                "created_by": {
                    "type": "string",
                    "description": "The profile who created the rule"
                },
                "created_by_type": {
                    "type": "string",
                    "description": "The profile type who created the rule can be 'avatar', 'application', 'apikey'"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "x-nullable": true,
                    "description": "The modification date of the rule"
                },
                "updated_by": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The profile who updated the rule"
                },
                "updated_by_type": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The profile type who updated the rule can be 'rule', 'application', 'apikey'"
                },
                "goal": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "A high-level description explaining the contribution of the rule"
                },
                "false_positives": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "A possible legitimate usage which can raise a false alert"
                },
                "references": {
                    "type": "string",
                    "description": "Details on what led to write this rule"
                },
                "community_uuid": {
                    "type": "string",
                    "x-nullable": true,
                    "description": "The community uuid if the rule is attached to one"
                },
                "available_for_subcommunities": {
                    "type": "boolean",
                    "default": false,
                    "x-nullable": true,
                    "description": "Is the rule available for subcommunities (if applicable)"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the instance of the rule"
                            },
                            "enabled": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Is the rule enabled?"
                            },
                            "community_uuid": {
                                "type": "string",
                                "description": "The community uuid of the rule instance"
                            },
                            "parameters": {
                                "type": "array",
                                "description": "The parameters of the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "the identifier of the parameter"
                                        },
                                        "name": {
                                            "type": "string",
                                            "minLength": 5,
                                            "maxLength": 100,
                                            "description": "The name of the parameter"
                                        },
                                        "value": {
                                            "type": "string",
                                            "description": "The value of the parameter"
                                        },
                                        "default": {
                                            "type": "string",
                                            "description": "The default value of the parameter"
                                        },
                                        "description": {
                                            "type": "string",
                                            "maxLength": 1000,
                                            "description": "the description of the parameter"
                                        }
                                    },
                                    "required": [
                                        "default",
                                        "description",
                                        "name",
                                        "uuid",
                                        "value"
                                    ]
                                }
                            },
                            "all_entities": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Should the rule be applied on all entities?"
                            },
                            "entities": {
                                "type": "array",
                                "description": "The list of entities the rule should be applied on",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "minLength": 5,
                                            "maxLength": 100,
                                            "description": "The name of the entity"
                                        },
                                        "entity_id": {
                                            "type": "string",
                                            "description": "The Id of the entity"
                                        },
                                        "alerts_generation": {
                                            "type": "string",
                                            "description": "The uuid of the generation mode"
                                        },
                                        "description": {
                                            "type": "string",
                                            "maxLength": 1000,
                                            "description": "The descrition of the entity"
                                        },
                                        "community_uuid": {
                                            "type": "string"
                                        },
                                        "uuid": {
                                            "type": "string"
                                        },
                                        "number_of_intakes": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "alerts_generation",
                                        "community_uuid",
                                        "entity_id",
                                        "name",
                                        "uuid"
                                    ]
                                }
                            },
                            "all_assets": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Should the rule be applied on all assets?"
                            },
                            "assets": {
                                "type": "array",
                                "description": "The list of assets identifiers the rule should be applied on",
                                "items": {
                                    "type": "string",
                                    "format": "uuid"
                                }
                            },
                            "last_compilation_success": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Is the last compilation succeed?"
                            },
                            "last_compilation_message": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The message of the last compilation"
                            },
                            "last_compilation_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The last compilation date of the rule"
                            },
                            "exclude_assets": {
                                "type": "boolean",
                                "description": "Are the listed assets excluded or included"
                            },
                            "exclude_entities": {
                                "type": "boolean",
                                "description": "Are the listed entities excluded or included"
                            }
                        },
                        "required": [
                            "all_assets",
                            "all_entities",
                            "enabled",
                            "last_compilation_at",
                            "last_compilation_message",
                            "last_compilation_success",
                            "parameters",
                            "uuid"
                        ]
                    }
                }
            },
            "required": [
                "alert_category",
                "alert_type",
                "created_at",
                "created_by",
                "created_by_type",
                "datasources",
                "effort",
                "enabled",
                "event_fields",
                "name",
                "related_object_refs",
                "severity",
                "source",
                "type",
                "updated_at",
                "uuid",
                "verified"
            ]
        },
        "MultiTenantRulesSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "format": "uuid",
                                "description": "the identifier of the rule"
                            },
                            "enabled": {
                                "type": "boolean",
                                "x-nullable": true,
                                "description": "Is the rule enabled?"
                            },
                            "name": {
                                "type": "string",
                                "minLength": 5,
                                "maxLength": 100,
                                "description": "The name of the rule"
                            },
                            "type": {
                                "description": "The type of the rule"
                            },
                            "private": {
                                "type": "boolean",
                                "description": "Is the rule available only for the community?"
                            },
                            "is_private": {
                                "type": "boolean",
                                "description": "Is the rule available only for the community?"
                            },
                            "description": {
                                "type": "string",
                                "maxLength": 1000,
                                "description": "The descrition of the rule"
                            },
                            "payload": {
                                "type": "string",
                                "description": "The payload of the rule"
                            },
                            "severity": {
                                "type": "integer",
                                "description": "The severity of the rule"
                            },
                            "effort": {
                                "type": "integer",
                                "description": "The effort of the rule"
                            },
                            "alert_type": {
                                "description": "The alert type associated to the rule",
                                "type": "object",
                                "properties": {
                                    "uuid": {
                                        "type": "string",
                                        "description": "Alert type uuid"
                                    },
                                    "category_uuid": {
                                        "type": "string",
                                        "description": "Alert type category uuid"
                                    },
                                    "category_name": {
                                        "type": "string",
                                        "description": "Alert type category name"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Alert type name "
                                    },
                                    "detail": {
                                        "type": "string",
                                        "description": "Alert type detail"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Alert type description"
                                    }
                                },
                                "required": [
                                    "category_name",
                                    "category_uuid",
                                    "uuid",
                                    "value"
                                ]
                            },
                            "alert_category": {
                                "description": "The alert category associated to the rule",
                                "type": "object",
                                "properties": {
                                    "uuid": {
                                        "type": "string",
                                        "description": "Alert category uuid"
                                    },
                                    "name": {
                                        "type": "string",
                                        "minLength": 5,
                                        "maxLength": 100,
                                        "description": "Alert category name"
                                    }
                                },
                                "required": [
                                    "name",
                                    "uuid"
                                ]
                            },
                            "tags": {
                                "type": "array",
                                "description": "The list of tags associated to the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "the identifier of the tag"
                                        },
                                        "name": {
                                            "type": "string",
                                            "minLength": 5,
                                            "maxLength": 100,
                                            "description": "The name of the tag"
                                        }
                                    },
                                    "required": [
                                        "name",
                                        "uuid"
                                    ]
                                }
                            },
                            "source": {
                                "type": "string",
                                "description": "The source of the rule"
                            },
                            "verified": {
                                "type": "boolean",
                                "description": "Is the rule verified?"
                            },
                            "related_object_refs": {
                                "type": "array",
                                "description": "The list of reference of objects related to the rule",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "datasources": {
                                "type": "array",
                                "description": "The list of datasources of the rule",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "description": "Unique identifier of the datasource"
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the datasource"
                                        }
                                    }
                                }
                            },
                            "event_fields": {
                                "type": "array",
                                "description": "The list of fields to show when displaying a matched event",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "field": {
                                            "type": "string",
                                            "description": "Field path"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "Field description"
                                        }
                                    },
                                    "required": [
                                        "description",
                                        "field"
                                    ]
                                }
                            },
                            "similarity_strategy": {
                                "type": "array",
                                "description": "Similarity Strategy used by this rule",
                                "items": {}
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The creation date of the rule"
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The profile who created the rule"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The profile type who created the rule can be 'avatar', 'application', 'apikey'"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The modification date of the rule"
                            },
                            "updated_by": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The profile who updated the rule"
                            },
                            "updated_by_type": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The profile type who updated the rule can be 'rule', 'application', 'apikey'"
                            },
                            "goal": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "A high-level description explaining the contribution of the rule"
                            },
                            "false_positives": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "A possible legitimate usage which can raise a false alert"
                            },
                            "references": {
                                "type": "string",
                                "description": "Details on what led to write this rule"
                            },
                            "community_uuid": {
                                "type": "string",
                                "x-nullable": true,
                                "description": "The community uuid if the rule is attached to one"
                            },
                            "available_for_subcommunities": {
                                "type": "boolean",
                                "default": false,
                                "x-nullable": true,
                                "description": "Is the rule available for subcommunities (if applicable)"
                            },
                            "instances": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "format": "uuid",
                                            "description": "the identifier of the instance of the rule"
                                        },
                                        "enabled": {
                                            "type": "boolean",
                                            "x-nullable": true,
                                            "description": "Is the rule enabled?"
                                        },
                                        "community_uuid": {
                                            "type": "string",
                                            "description": "The community uuid of the rule instance"
                                        },
                                        "parameters": {
                                            "type": "array",
                                            "description": "The parameters of the rule",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "uuid": {
                                                        "type": "string",
                                                        "format": "uuid",
                                                        "description": "the identifier of the parameter"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "minLength": 5,
                                                        "maxLength": 100,
                                                        "description": "The name of the parameter"
                                                    },
                                                    "value": {
                                                        "type": "string",
                                                        "description": "The value of the parameter"
                                                    },
                                                    "default": {
                                                        "type": "string",
                                                        "description": "The default value of the parameter"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "maxLength": 1000,
                                                        "description": "the description of the parameter"
                                                    }
                                                },
                                                "required": [
                                                    "default",
                                                    "description",
                                                    "name",
                                                    "uuid",
                                                    "value"
                                                ]
                                            }
                                        },
                                        "all_entities": {
                                            "type": "boolean",
                                            "x-nullable": true,
                                            "description": "Should the rule be applied on all entities?"
                                        },
                                        "entities": {
                                            "type": "array",
                                            "description": "The list of entities the rule should be applied on",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "minLength": 5,
                                                        "maxLength": 100,
                                                        "description": "The name of the entity"
                                                    },
                                                    "entity_id": {
                                                        "type": "string",
                                                        "description": "The Id of the entity"
                                                    },
                                                    "alerts_generation": {
                                                        "type": "string",
                                                        "description": "The uuid of the generation mode"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "maxLength": 1000,
                                                        "description": "The descrition of the entity"
                                                    },
                                                    "community_uuid": {
                                                        "type": "string"
                                                    },
                                                    "uuid": {
                                                        "type": "string"
                                                    },
                                                    "number_of_intakes": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "alerts_generation",
                                                    "community_uuid",
                                                    "entity_id",
                                                    "name",
                                                    "uuid"
                                                ]
                                            }
                                        },
                                        "all_assets": {
                                            "type": "boolean",
                                            "x-nullable": true,
                                            "description": "Should the rule be applied on all assets?"
                                        },
                                        "assets": {
                                            "type": "array",
                                            "description": "The list of assets identifiers the rule should be applied on",
                                            "items": {
                                                "type": "string",
                                                "format": "uuid"
                                            }
                                        },
                                        "last_compilation_success": {
                                            "type": "boolean",
                                            "x-nullable": true,
                                            "description": "Is the last compilation succeed?"
                                        },
                                        "last_compilation_message": {
                                            "type": "string",
                                            "x-nullable": true,
                                            "description": "The message of the last compilation"
                                        },
                                        "last_compilation_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "x-nullable": true,
                                            "description": "The last compilation date of the rule"
                                        },
                                        "exclude_assets": {
                                            "type": "boolean",
                                            "description": "Are the listed assets excluded or included"
                                        },
                                        "exclude_entities": {
                                            "type": "boolean",
                                            "description": "Are the listed entities excluded or included"
                                        }
                                    },
                                    "required": [
                                        "all_assets",
                                        "all_entities",
                                        "enabled",
                                        "last_compilation_at",
                                        "last_compilation_message",
                                        "last_compilation_success",
                                        "parameters",
                                        "uuid"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "alert_category",
                            "alert_type",
                            "created_at",
                            "created_by",
                            "created_by_type",
                            "datasources",
                            "effort",
                            "enabled",
                            "event_fields",
                            "name",
                            "related_object_refs",
                            "severity",
                            "source",
                            "type",
                            "updated_at",
                            "uuid",
                            "verified"
                        ]
                    }
                }
            }
        },
        "MultiTenantAlertFiltersSchema": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uuid": {
                                "type": "string",
                                "description": "The unique ressource ID"
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the alert filter"
                            },
                            "description": {
                                "type": "string",
                                "description": "The description of the alert filter"
                            },
                            "exclusion_pattern": {
                                "type": "string",
                                "description": "The STIX observation expression that models the exclusion pattern"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The creation date of the alert filter"
                            },
                            "created_by": {
                                "type": "string",
                                "description": "The profile who created the alert filter"
                            },
                            "created_by_type": {
                                "type": "string",
                                "description": "The profile type who created the alert filter can be 'avatar', 'application', 'apikey'"
                            },
                            "expires_at": {
                                "type": "string",
                                "format": "date-time",
                                "x-nullable": true,
                                "description": "The expiration date of the alert filter"
                            },
                            "status": {
                                "description": "Status of the Alert Filter (active or expired)"
                            },
                            "community_uuid": {
                                "type": "string"
                            },
                            "rule_instance_uuid": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "created_at",
                            "created_by",
                            "created_by_type",
                            "exclusion_pattern",
                            "name",
                            "status",
                            "uuid"
                        ]
                    }
                }
            }
        },
        "Change2024061Schema": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "old": {
                                    "description": "Old value"
                                },
                                "new": {
                                    "description": "New value"
                                }
                            }
                        }
                    }
                },
                "similarity_strategy": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "old": {
                                    "description": "Old value"
                                },
                                "new": {
                                    "description": "New value"
                                }
                            }
                        }
                    }
                },
                "event_fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "old": {
                                    "description": "Old value"
                                },
                                "new": {
                                    "description": "New value"
                                }
                            }
                        }
                    }
                },
                "alert_filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "old": {
                                    "description": "Old value"
                                },
                                "new": {
                                    "description": "New value"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        },
        "PlatformError": {}
    }
}
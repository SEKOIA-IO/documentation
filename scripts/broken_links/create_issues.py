"""
The script will create a markdown body that can be used to create issues in the repository.

It uses the csv file generated by linkchecker to create the body.

1. Use the following command line to run linkchecker:
$ linkchecker --check-extern --ignore-url="github.com/SEKOIA-IO" --no-follow-url="!://docs.sekoia.io/" "https://docs.sekoia.io" -o csv -F csv

2. Run the script with the path to the csv file as argument:
$ python scripts/broken_links/create_issues.py path/to/linkchecker-out.csv


"""

import csv
import sys


def main(csv_file):

    fieldnames =(
        "urlname",
        "parentname",
        "base",
        "result",
        "warningstring",
        "infostring",
        "valid",
        "url",
        "line",
        "column",
        "name"        
    )

    broken_pages = dict()


    with open(csv_file, mode='r') as file:
        csv_reader = csv.DictReader(file, fieldnames=fieldnames, delimiter=";")
        for row in csv_reader:
            if not row['url'] or row['parentname'] == "parentname":
                continue
            if row["valid"] == "True":
                continue

            if row["parentname"] not in broken_pages:
                broken_pages[row["parentname"]] = []

            broken_pages[row["parentname"]].append(row)

    body = ""
    for parentname, rows in broken_pages.items():
        title = f"Found broken link in {parentname}"

        tasks = []
        for row in rows:
            task = f"- [ ] Link '{row['name']}' that points on {row['url']}) is broken ({row['result']})"
            tasks.append(task)

        body += f"### {title}\n"
        body += "\n".join(tasks)
        body += "\n\n"

    print(body)



if __name__ == "__main__":
    # read the csv file path from the arguments
    args = sys.argv
    if len(args) < 2:
        print("Please provide the path to the csv file.")
        sys.exit(1)

    csv_file = args[1]
    main(csv_file)